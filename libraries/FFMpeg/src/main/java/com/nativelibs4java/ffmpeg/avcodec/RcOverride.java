package com.nativelibs4java.ffmpeg.avcodec;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : libavcodec/avcodec.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
public class RcOverride extends StructObject {
	public RcOverride() {
		super();
	}
	public RcOverride(Pointer pointer) {
		super(pointer);
	}
	@Field(0) 
	public int start_frame() {
		return this.io.getIntField(this, 0);
	}
	@Field(0) 
	public RcOverride start_frame(int start_frame) {
		this.io.setIntField(this, 0, start_frame);
		return this;
	}
	public final int start_frame_$eq(int start_frame) {
		start_frame(start_frame);
		return start_frame;
	}
	@Field(1) 
	public int end_frame() {
		return this.io.getIntField(this, 1);
	}
	@Field(1) 
	public RcOverride end_frame(int end_frame) {
		this.io.setIntField(this, 1, end_frame);
		return this;
	}
	public final int end_frame_$eq(int end_frame) {
		end_frame(end_frame);
		return end_frame;
	}
	/// If this is 0 then quality_factor will be used instead.
	@Field(2) 
	public int qscale() {
		return this.io.getIntField(this, 2);
	}
	/// If this is 0 then quality_factor will be used instead.
	@Field(2) 
	public RcOverride qscale(int qscale) {
		this.io.setIntField(this, 2, qscale);
		return this;
	}
	public final int qscale_$eq(int qscale) {
		qscale(qscale);
		return qscale;
	}
	@Field(3) 
	public float quality_factor() {
		return this.io.getFloatField(this, 3);
	}
	@Field(3) 
	public RcOverride quality_factor(float quality_factor) {
		this.io.setFloatField(this, 3, quality_factor);
		return this;
	}
	public final float quality_factor_$eq(float quality_factor) {
		quality_factor(quality_factor);
		return quality_factor;
	}
}
