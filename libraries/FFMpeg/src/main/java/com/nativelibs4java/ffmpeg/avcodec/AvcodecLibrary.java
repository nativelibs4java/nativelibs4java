package com.nativelibs4java.ffmpeg.avcodec;
import com.nativelibs4java.ffmpeg.avutil.AVRational;
import com.nativelibs4java.ffmpeg.swscale.SwscaleLibrary.PixelFormat;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ValuedEnum;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
/**
 * Wrapper for library <b>avcodec</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
@Runtime(CPPRuntime.class) 
public class AvcodecLibrary {
	static {
		BridJ.register();
	}
	public enum CodecID implements IntValuedEnum<CodecID > {
		CODEC_ID_NONE(0),
		CODEC_ID_MPEG1VIDEO(1),
		CODEC_ID_MPEG2VIDEO(2),
		CODEC_ID_MPEG2VIDEO_XVMC(3),
		CODEC_ID_H261(4),
		CODEC_ID_H263(5),
		CODEC_ID_RV10(6),
		CODEC_ID_RV20(7),
		CODEC_ID_MJPEG(8),
		CODEC_ID_MJPEGB(9),
		CODEC_ID_LJPEG(10),
		CODEC_ID_SP5X(11),
		CODEC_ID_JPEGLS(12),
		CODEC_ID_MPEG4(13),
		CODEC_ID_RAWVIDEO(14),
		CODEC_ID_MSMPEG4V1(15),
		CODEC_ID_MSMPEG4V2(16),
		CODEC_ID_MSMPEG4V3(17),
		CODEC_ID_WMV1(18),
		CODEC_ID_WMV2(19),
		CODEC_ID_H263P(20),
		CODEC_ID_H263I(21),
		CODEC_ID_FLV1(22),
		CODEC_ID_SVQ1(23),
		CODEC_ID_SVQ3(24),
		CODEC_ID_DVVIDEO(25),
		CODEC_ID_HUFFYUV(26),
		CODEC_ID_CYUV(27),
		CODEC_ID_H264(28),
		CODEC_ID_INDEO3(29),
		CODEC_ID_VP3(30),
		CODEC_ID_THEORA(31),
		CODEC_ID_ASV1(32),
		CODEC_ID_ASV2(33),
		CODEC_ID_FFV1(34),
		CODEC_ID_4XM(35),
		CODEC_ID_VCR1(36),
		CODEC_ID_CLJR(37),
		CODEC_ID_MDEC(38),
		CODEC_ID_ROQ(39),
		CODEC_ID_INTERPLAY_VIDEO(40),
		CODEC_ID_XAN_WC3(41),
		CODEC_ID_XAN_WC4(42),
		CODEC_ID_RPZA(43),
		CODEC_ID_CINEPAK(44),
		CODEC_ID_WS_VQA(45),
		CODEC_ID_MSRLE(46),
		CODEC_ID_MSVIDEO1(47),
		CODEC_ID_IDCIN(48),
		CODEC_ID_8BPS(49),
		CODEC_ID_SMC(50),
		CODEC_ID_FLIC(51),
		CODEC_ID_TRUEMOTION1(52),
		CODEC_ID_VMDVIDEO(53),
		CODEC_ID_MSZH(54),
		CODEC_ID_ZLIB(55),
		CODEC_ID_QTRLE(56),
		CODEC_ID_SNOW(57),
		CODEC_ID_TSCC(58),
		CODEC_ID_ULTI(59),
		CODEC_ID_QDRAW(60),
		CODEC_ID_VIXL(61),
		CODEC_ID_QPEG(62),
		CODEC_ID_XVID(63),
		CODEC_ID_PNG(64),
		CODEC_ID_PPM(65),
		CODEC_ID_PBM(66),
		CODEC_ID_PGM(67),
		CODEC_ID_PGMYUV(68),
		CODEC_ID_PAM(69),
		CODEC_ID_FFVHUFF(70),
		CODEC_ID_RV30(71),
		CODEC_ID_RV40(72),
		CODEC_ID_VC1(73),
		CODEC_ID_WMV3(74),
		CODEC_ID_LOCO(75),
		CODEC_ID_WNV1(76),
		CODEC_ID_AASC(77),
		CODEC_ID_INDEO2(78),
		CODEC_ID_FRAPS(79),
		CODEC_ID_TRUEMOTION2(80),
		CODEC_ID_BMP(81),
		CODEC_ID_CSCD(82),
		CODEC_ID_MMVIDEO(83),
		CODEC_ID_ZMBV(84),
		CODEC_ID_AVS(85),
		CODEC_ID_SMACKVIDEO(86),
		CODEC_ID_NUV(87),
		CODEC_ID_KMVC(88),
		CODEC_ID_FLASHSV(89),
		CODEC_ID_CAVS(90),
		CODEC_ID_JPEG2000(91),
		CODEC_ID_VMNC(92),
		CODEC_ID_VP5(93),
		CODEC_ID_VP6(94),
		CODEC_ID_VP6F(95),
		CODEC_ID_TARGA(96),
		CODEC_ID_DSICINVIDEO(97),
		CODEC_ID_TIERTEXSEQVIDEO(98),
		CODEC_ID_TIFF(99),
		CODEC_ID_GIF(100),
		CODEC_ID_FFH264(101),
		CODEC_ID_DXA(102),
		CODEC_ID_DNXHD(103),
		CODEC_ID_THP(104),
		CODEC_ID_SGI(105),
		CODEC_ID_C93(106),
		CODEC_ID_BETHSOFTVID(107),
		CODEC_ID_PTX(108),
		CODEC_ID_TXD(109),
		CODEC_ID_VP6A(110),
		CODEC_ID_AMV(111),
		CODEC_ID_VB(112),
		CODEC_ID_PCX(113),
		CODEC_ID_SUNRAST(114),
		CODEC_ID_INDEO4(115),
		CODEC_ID_INDEO5(116),
		CODEC_ID_MIMIC(117),
		CODEC_ID_RL2(118),
		CODEC_ID_8SVX_EXP(119),
		CODEC_ID_8SVX_FIB(120),
		CODEC_ID_ESCAPE124(121),
		CODEC_ID_DIRAC(122),
		CODEC_ID_BFI(123),
		CODEC_ID_CMV(124),
		CODEC_ID_MOTIONPIXELS(125),
		CODEC_ID_TGV(126),
		CODEC_ID_TGQ(127),
		CODEC_ID_TQI(128),
		CODEC_ID_AURA(129),
		CODEC_ID_AURA2(130),
		CODEC_ID_V210X(131),
		CODEC_ID_TMV(132),
		CODEC_ID_V210(133),
		CODEC_ID_DPX(134),
		CODEC_ID_MAD(135),
		CODEC_ID_FRWU(136),
		CODEC_ID_FLASHSV2(137),
		CODEC_ID_CDGRAPHICS(138),
		CODEC_ID_R210(139),
		CODEC_ID_ANM(140),
		CODEC_ID_BINKVIDEO(141),
		CODEC_ID_IFF_ILBM(142),
		CODEC_ID_IFF_BYTERUN1(143),
		CODEC_ID_KGV1(144),
		CODEC_ID_YOP(145),
		CODEC_ID_VP8(146),
		CODEC_ID_PICTOR(147),
		CODEC_ID_ANSI(148),
		CODEC_ID_A64_MULTI(149),
		CODEC_ID_A64_MULTI5(150),
		CODEC_ID_R10K(151),
		CODEC_ID_MXPEG(152),
		CODEC_ID_LAGARITH(153),
		CODEC_ID_PCM_S16LE(0x10000),
		CODEC_ID_PCM_S16BE(65537),
		CODEC_ID_PCM_U16LE(65538),
		CODEC_ID_PCM_U16BE(65539),
		CODEC_ID_PCM_S8(65540),
		CODEC_ID_PCM_U8(65541),
		CODEC_ID_PCM_MULAW(65542),
		CODEC_ID_PCM_ALAW(65543),
		CODEC_ID_PCM_S32LE(65544),
		CODEC_ID_PCM_S32BE(65545),
		CODEC_ID_PCM_U32LE(65546),
		CODEC_ID_PCM_U32BE(65547),
		CODEC_ID_PCM_S24LE(65548),
		CODEC_ID_PCM_S24BE(65549),
		CODEC_ID_PCM_U24LE(65550),
		CODEC_ID_PCM_U24BE(65551),
		CODEC_ID_PCM_S24DAUD(65552),
		CODEC_ID_PCM_ZORK(65553),
		CODEC_ID_PCM_S16LE_PLANAR(65554),
		CODEC_ID_PCM_DVD(65555),
		CODEC_ID_PCM_F32BE(65556),
		CODEC_ID_PCM_F32LE(65557),
		CODEC_ID_PCM_F64BE(65558),
		CODEC_ID_PCM_F64LE(65559),
		CODEC_ID_PCM_BLURAY(65560),
		CODEC_ID_PCM_LXF(65561),
		CODEC_ID_ADPCM_IMA_QT(0x11000),
		CODEC_ID_ADPCM_IMA_WAV(69633),
		CODEC_ID_ADPCM_IMA_DK3(69634),
		CODEC_ID_ADPCM_IMA_DK4(69635),
		CODEC_ID_ADPCM_IMA_WS(69636),
		CODEC_ID_ADPCM_IMA_SMJPEG(69637),
		CODEC_ID_ADPCM_MS(69638),
		CODEC_ID_ADPCM_4XM(69639),
		CODEC_ID_ADPCM_XA(69640),
		CODEC_ID_ADPCM_ADX(69641),
		CODEC_ID_ADPCM_EA(69642),
		CODEC_ID_ADPCM_G726(69643),
		CODEC_ID_ADPCM_CT(69644),
		CODEC_ID_ADPCM_SWF(69645),
		CODEC_ID_ADPCM_YAMAHA(69646),
		CODEC_ID_ADPCM_SBPRO_4(69647),
		CODEC_ID_ADPCM_SBPRO_3(69648),
		CODEC_ID_ADPCM_SBPRO_2(69649),
		CODEC_ID_ADPCM_THP(69650),
		CODEC_ID_ADPCM_IMA_AMV(69651),
		CODEC_ID_ADPCM_EA_R1(69652),
		CODEC_ID_ADPCM_EA_R3(69653),
		CODEC_ID_ADPCM_EA_R2(69654),
		CODEC_ID_ADPCM_IMA_EA_SEAD(69655),
		CODEC_ID_ADPCM_IMA_EA_EACS(69656),
		CODEC_ID_ADPCM_EA_XAS(69657),
		CODEC_ID_ADPCM_EA_MAXIS_XA(69658),
		CODEC_ID_ADPCM_IMA_ISS(69659),
		CODEC_ID_ADPCM_G722(69660),
		CODEC_ID_AMR_NB(0x12000),
		CODEC_ID_AMR_WB(73729),
		CODEC_ID_RA_144(0x13000),
		CODEC_ID_RA_288(77825),
		CODEC_ID_ROQ_DPCM(0x14000),
		CODEC_ID_INTERPLAY_DPCM(81921),
		CODEC_ID_XAN_DPCM(81922),
		CODEC_ID_SOL_DPCM(81923),
		CODEC_ID_MP2(0x15000),
		CODEC_ID_MP3(86017),
		CODEC_ID_AAC(86018),
		CODEC_ID_AC3(86019),
		CODEC_ID_DTS(86020),
		CODEC_ID_VORBIS(86021),
		CODEC_ID_DVAUDIO(86022),
		CODEC_ID_WMAV1(86023),
		CODEC_ID_WMAV2(86024),
		CODEC_ID_MACE3(86025),
		CODEC_ID_MACE6(86026),
		CODEC_ID_VMDAUDIO(86027),
		CODEC_ID_SONIC(86028),
		CODEC_ID_SONIC_LS(86029),
		CODEC_ID_FLAC(86030),
		CODEC_ID_MP3ADU(86031),
		CODEC_ID_MP3ON4(86032),
		CODEC_ID_SHORTEN(86033),
		CODEC_ID_ALAC(86034),
		CODEC_ID_WESTWOOD_SND1(86035),
		CODEC_ID_GSM(86036),
		CODEC_ID_QDM2(86037),
		CODEC_ID_COOK(86038),
		CODEC_ID_TRUESPEECH(86039),
		CODEC_ID_TTA(86040),
		CODEC_ID_SMACKAUDIO(86041),
		CODEC_ID_QCELP(86042),
		CODEC_ID_WAVPACK(86043),
		CODEC_ID_DSICINAUDIO(86044),
		CODEC_ID_IMC(86045),
		CODEC_ID_MUSEPACK7(86046),
		CODEC_ID_MLP(86047),
		CODEC_ID_GSM_MS(86048),
		CODEC_ID_ATRAC3(86049),
		CODEC_ID_VOXWARE(86050),
		CODEC_ID_APE(86051),
		CODEC_ID_NELLYMOSER(86052),
		CODEC_ID_MUSEPACK8(86053),
		CODEC_ID_SPEEX(86054),
		CODEC_ID_WMAVOICE(86055),
		CODEC_ID_WMAPRO(86056),
		CODEC_ID_WMALOSSLESS(86057),
		CODEC_ID_ATRAC3P(86058),
		CODEC_ID_EAC3(86059),
		CODEC_ID_SIPR(86060),
		CODEC_ID_MP1(86061),
		CODEC_ID_TWINVQ(86062),
		CODEC_ID_TRUEHD(86063),
		CODEC_ID_MP4ALS(86064),
		CODEC_ID_ATRAC1(86065),
		CODEC_ID_BINKAUDIO_RDFT(86066),
		CODEC_ID_BINKAUDIO_DCT(86067),
		CODEC_ID_AAC_LATM(86068),
		CODEC_ID_DVD_SUBTITLE(0x17000),
		CODEC_ID_DVB_SUBTITLE(94209),
		CODEC_ID_TEXT(94210),
		CODEC_ID_XSUB(94211),
		CODEC_ID_SSA(94212),
		CODEC_ID_MOV_TEXT(94213),
		CODEC_ID_HDMV_PGS_SUBTITLE(94214),
		CODEC_ID_DVB_TELETEXT(94215),
		CODEC_ID_SRT(94216),
		CODEC_ID_TTF(0x18000),
		CODEC_ID_PROBE(0x19000),
		CODEC_ID_MPEG2TS(0x20000),
		CODEC_ID_FFMETADATA(0x21000);
		CodecID(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<CodecID > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<CodecID > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum Motion_Est_ID implements IntValuedEnum<Motion_Est_ID > {
		ME_ZERO(1),
		ME_FULL(2),
		ME_LOG(3),
		ME_PHODS(4),
		ME_EPZS(5),
		ME_X1(6),
		ME_HEX(7),
		ME_UMH(8),
		ME_ITER(9),
		ME_TESA(10);
		Motion_Est_ID(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<Motion_Est_ID > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<Motion_Est_ID > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVDiscard implements IntValuedEnum<AVDiscard > {
		AVDISCARD_NONE(-16),
		AVDISCARD_DEFAULT(0),
		AVDISCARD_NONREF(8),
		AVDISCARD_BIDIR(16),
		AVDISCARD_NONKEY(32),
		AVDISCARD_ALL(48);
		AVDiscard(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVDiscard > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVDiscard > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorPrimaries implements IntValuedEnum<AVColorPrimaries > {
		AVCOL_PRI_BT709(1),
		AVCOL_PRI_UNSPECIFIED(2),
		AVCOL_PRI_BT470M(4),
		AVCOL_PRI_BT470BG(5),
		AVCOL_PRI_SMPTE170M(6),
		AVCOL_PRI_SMPTE240M(7),
		AVCOL_PRI_FILM(8),
		AVCOL_PRI_NB(9);
		AVColorPrimaries(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorPrimaries > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorPrimaries > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorTransferCharacteristic implements IntValuedEnum<AVColorTransferCharacteristic > {
		AVCOL_TRC_BT709(1),
		AVCOL_TRC_UNSPECIFIED(2),
		AVCOL_TRC_GAMMA22(4),
		AVCOL_TRC_GAMMA28(5),
		AVCOL_TRC_NB(6);
		AVColorTransferCharacteristic(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorTransferCharacteristic > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorTransferCharacteristic > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorSpace implements IntValuedEnum<AVColorSpace > {
		AVCOL_SPC_RGB(0),
		AVCOL_SPC_BT709(1),
		AVCOL_SPC_UNSPECIFIED(2),
		AVCOL_SPC_FCC(4),
		AVCOL_SPC_BT470BG(5),
		AVCOL_SPC_SMPTE170M(6),
		AVCOL_SPC_SMPTE240M(7),
		AVCOL_SPC_NB(8);
		AVColorSpace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorSpace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorSpace > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorRange implements IntValuedEnum<AVColorRange > {
		AVCOL_RANGE_UNSPECIFIED(0),
		AVCOL_RANGE_MPEG(1),
		AVCOL_RANGE_JPEG(2),
		AVCOL_RANGE_NB(3);
		AVColorRange(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorRange > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorRange > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVChromaLocation implements IntValuedEnum<AVChromaLocation > {
		AVCHROMA_LOC_UNSPECIFIED(0),
		AVCHROMA_LOC_LEFT(1),
		AVCHROMA_LOC_CENTER(2),
		AVCHROMA_LOC_TOPLEFT(3),
		AVCHROMA_LOC_TOP(4),
		AVCHROMA_LOC_BOTTOMLEFT(5),
		AVCHROMA_LOC_BOTTOM(6),
		AVCHROMA_LOC_NB(7);
		AVChromaLocation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVChromaLocation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVChromaLocation > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVLPCType implements IntValuedEnum<AVLPCType > {
		AV_LPC_TYPE_DEFAULT(-1),
		AV_LPC_TYPE_NONE(0),
		AV_LPC_TYPE_FIXED(1),
		AV_LPC_TYPE_LEVINSON(2),
		AV_LPC_TYPE_CHOLESKY(3),
		AV_LPC_TYPE_NB(4);
		AVLPCType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVLPCType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVLPCType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVSubtitleType implements IntValuedEnum<AVSubtitleType > {
		SUBTITLE_NONE(0),
		SUBTITLE_BITMAP(1),
		SUBTITLE_TEXT(2),
		SUBTITLE_ASS(3);
		AVSubtitleType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVSubtitleType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVSubtitleType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVLockOp implements IntValuedEnum<AVLockOp > {
		AV_LOCK_CREATE(0),
		AV_LOCK_OBTAIN(1),
		AV_LOCK_RELEASE(2),
		AV_LOCK_DESTROY(3);
		AVLockOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVLockOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVLockOp > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/rational.h</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_CLOSED_GOP = (int)-2147483648;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_STRICT_GOP = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_ALTIVEC = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GRAY = (int)8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_BITS = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVPALETTE_SIZE = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_P4X4 = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_SIMPLE = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_SVCD_SCAN_OFFSET = (int)1073741824;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_CAREFUL = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_AUD = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_16_9_SP_14_9 = (int)14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P0L1 = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_DTS_HD_HRA = (int)50;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_BITEXACT = (int)8388608;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_INT = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_SLICE_STRUCT = (int)268435456;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P0L0 = (int)4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_DEPTH = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_EA = (int)21;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_MPEG1 = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_MPEG2 = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_ARM = (int)7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_IPP = (int)13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_XVIDMMX = (int)14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_QUANT = (int)65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_RD = (int)6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_I4X4 = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_TRUNCATED = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_XVID_ILACE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_CAVS = (int)15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_RC_STRATEGY_XVID = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_DEFLATE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_LTP = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEVIS = (int)18;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AV_PARSER_PTS_NB = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_ALPHA = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_LOW = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_SUBFRAMES = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_EXTERN_HUFF = (int)4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_B_BACK = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_W97 = (int)12;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARMV6 = (int)17;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_AC = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_INOFFICIAL = (int)-1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_QPEL_CHROMA = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PARSER_FLAG_FETCHED_OFFSET = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_W53 = (int)11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_WMV2 = (int)19;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_INT = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_SAME = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_USER = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_P_TYPE = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_COPY = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCT = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_COLORSPACE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ALPHA_SEMI_TRANSP = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_4_3_SP_14_9 = (int)13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_ALTIVEC = (int)5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AC_VLC = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_NO_PADDING = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCTMAX = (int)13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_ZERO = (int)7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_EC_GUESS_MVS = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_CHROMA = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_CBP_RD = (int)67108864;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BUGS = (int)4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_FLOAT = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_ER = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_VLC = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_QPEL_CHROMA2 = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_SP_TYPE = (int)6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_VERY_STRICT = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_INTERNAL = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_8x16 = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_444 = (int)244;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_TRUNCATED = (int)65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SSE = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_STARTCODE = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_422 = (int)122;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LEVEL_UNKNOWN = (int)-99;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_NO_OUTPUT = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_INPUT_BUFFER_PADDING_SIZE = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_16_9 = (int)10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MV = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MB_TYPE = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARMV5TE = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_NSSE = (int)10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_MMX = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SATD = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SAD = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_MLIB = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_COLORQUANT = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_REUSABLE = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_AGGRESSIVE = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_TRUNCATED = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_VP56 = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_GMC = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVCODEC_MAX_AUDIO_FRAME_SIZE = (int)192000;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PARSER_FLAG_ONCE = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_4MV = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_LOCAL_HEADER = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_OLD_MSMPEG4 = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_PS2 = (int)5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BRDO = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_SI_TYPE = (int)5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_NORMALIZE_AQP = (int)131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_PSY = (int)524288;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_CODED_ORDER = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_INTRA_REFRESH = (int)2097152;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_10 = (int)110;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_MV0 = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTERLACED = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MMCO = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_HPEL_CHROMA = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_EC_DEBLOCK = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_MAIN = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_EDGE = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_CHUNKS = (int)32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_VALID = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_DIRECT2 = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_LEFT = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AUTODETECT = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_OBMC = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_EXPERIMENTAL = (int)-2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BPYRAMID = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_SSR = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PSNR = (int)32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_AIV = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_FAAN = (int)6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_BIT = (int)5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_PTS = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_4_3 = (int)9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_LOOP_FILTER = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_PARSE_ONLY = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_DROP_FRAME_TIMECODE = (int)8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_FASTINT = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_AC_PRED = (int)16777216;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_UMP4 = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BI_TYPE = (int)7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ALPHA_TRANSP = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BUFFERS = (int)32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_I8X8 = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AMV = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_16x8 = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_EMU_EDGE = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_MLIB = (int)6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH = (int)100;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_ALLOW_PLANE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_RESOLUTION = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_PSNR = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_14_9 = (int)11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_CHROMA = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_DTS_ES = (int)30;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_CHANNEL_CONF = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_LOW_DELAY = (int)524288;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_DTS_96_24 = (int)40;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INTERLACED_ME = (int)536870912;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_QP = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_RC = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_WPRED = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DRAW_HORIZ_BAND = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_AUTO = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA4x4 = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_NEG_LINESIZES = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_ALT_SCAN = (int)1048576;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_EXPERIMENTAL = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_INTRA_VLC = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ASPECT_EXTENDED = (int)15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_RD = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_NON_LINEAR_QUANT = (int)65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DR1 = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_STD_QPEL = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA16x16 = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_VP3 = (int)12;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_UMV = (int)33554432;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEALPHA = (int)23;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BIT_RESERVOIR = (int)131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QSCALE = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_ACPRED = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INPUT_PRESERVED = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVPALETTE_COUNT = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPRESSION_DEFAULT = (int)-1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_VERY_AGGRESSIVE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_EXTENDED = (int)88;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_LIBMPEG2MMX = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_NORMAL = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_HWACCEL = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_FASTPSKIP = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARM = (int)10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GLOBAL_HEADER = (int)4194304;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MAJOR = (int)52;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_SMALL_LAST_FRAME = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_H264 = (int)11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLE = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_UNKNOWN = (int)-99;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA_PCM = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_B8X8 = (int)256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GMC = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_DIRECT_BLOCKSIZE = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MICRO = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_S_TYPE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_RLE = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MIXED_REFS = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_PRESERVE = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PART = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_DTS = (int)20;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_B_TYPE = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SH4 = (int)9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_AUTO = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INTERLACED_DCT = (int)262144;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PASS2 = (int)1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PASS1 = (int)512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_DTS_HD_MA = (int)60;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEMMX = (int)3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_PLANE = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_COMPLIANT = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_VSSE = (int)9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PARSER_FLAG_COMPLETE_FRAMES = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_DCT_COEFF = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_SKIP_RD = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_RAW = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_ALLOW_FIELD = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MB_TYPE = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_SSIM = (int)1048576;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_CBP = (int)131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_AUTO = (int)0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEFAULT_QUANT_BIAS = (int)999999;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_BASELINE = (int)66;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MBTREE = (int)262144;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_FASTINT = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_PICT_INFO = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_INT = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLENEON = (int)22;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MAX_B_FRAMES = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MINOR = (int)108;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MIN_BUFFER_SIZE = (int)16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_DC_CLIP = (int)4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_8x8 = (int)64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_CAVLC_444 = (int)44;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P1L1 = (int)32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P1L0 = (int)8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final String LIBAVCODEC_IDENT = (String)"Lavc";
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_BINK = (int)24;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_UNOFFICIAL = (int)-1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_B_FOR = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AV_PKT_FLAG_KEY = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MEMC_ONLY = (int)4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_SP_4_3 = (int)15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_STRICT = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_QP = (int)8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BITSTREAM = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCT264 = (int)14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_16x16 = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_HWACCEL_VDPAU = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_FAST = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_MS = (int)8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QP_RD = (int)134217728;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_FAAN = (int)20;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_READABLE = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_I_TYPE = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QPEL = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_MAIN = (int)77;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_SHARED = (int)4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DELAY = (int)32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_P_FOR = (int)1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_SKIP = (int)2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_P8X8 = (int)16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_8X8DCT = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_H264 = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_SKIP = (int)128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_VSAD = (int)8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_MEDIAN = (int)2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_SET_STRING_OLD = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_PALETTE_CONTROL = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 54);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_L0 = (int)(AvcodecLibrary.MB_TYPE_P0L0 | AvcodecLibrary.MB_TYPE_P1L0);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_SUBTITLE_OLD = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_AUDIO_OLD = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_L1 = (int)(AvcodecLibrary.MB_TYPE_P0L1 | AvcodecLibrary.MB_TYPE_P1L1);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_VIDEO_OLD = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_INOFFICIAL = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PKT_FLAG_KEY = (int)AvcodecLibrary.AV_PKT_FLAG_KEY;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_OLD_SAMPLE_FMT = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_USE_LPC = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_OLD_AUDIOCONVERT = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_MM_FLAGS = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final boolean FF_API_OPT_SHOW = (boolean)(AvcodecLibrary.LIBAVCODEC_VERSION_MAJOR < 53);
	/// <i>native declaration : libavcodec/avcodec.h:3484</i>
	public static abstract class avcodec_default_execute_arg1_func_callback extends Callback<avcodec_default_execute_arg1_func_callback > {
		public abstract int apply(Pointer<AVCodecContext > c2, Pointer<? > arg2);
	};
	/// <i>native declaration : libavcodec/avcodec.h:3485</i>
	public static abstract class avcodec_default_execute2_arg1_func_callback extends Callback<avcodec_default_execute2_arg1_func_callback > {
		public abstract int apply(Pointer<AVCodecContext > c2, Pointer<? > arg2, int int1, int int2);
	};
	/// <i>native declaration : libavcodec/avcodec.h:4131</i>
	public static abstract class av_lockmgr_register_arg1_cb_callback extends Callback<av_lockmgr_register_arg1_cb_callback > {
		public abstract int apply(Pointer<Pointer<? > > mutex, AvcodecLibrary.AVLockOp op);
	};
	public static native void av_destruct_packet_nofree(Pointer<AVPacket > pkt);
	public static native void av_destruct_packet(Pointer<AVPacket > pkt);
	public static native void av_init_packet(Pointer<AVPacket > pkt);
	public static native int av_new_packet(Pointer<AVPacket > pkt, int size);
	public static native void av_shrink_packet(Pointer<AVPacket > pkt, int size);
	public static native int av_grow_packet(Pointer<AVPacket > pkt, int grow_by);
	public static native int av_dup_packet(Pointer<AVPacket > pkt);
	public static native void av_free_packet(Pointer<AVPacket > pkt);
	public static native Pointer<AvcodecLibrary.ReSampleContext > audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate);
	public static native Pointer<AvcodecLibrary.ReSampleContext > av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, AvcodecLibrary.AVSampleFormat sample_fmt_out, AvcodecLibrary.AVSampleFormat sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff);
	public static native int audio_resample(Pointer<AvcodecLibrary.ReSampleContext > s, Pointer<Short > output, Pointer<Short > input, int nb_samples);
	public static native void audio_resample_close(Pointer<AvcodecLibrary.ReSampleContext > s);
	public static native Pointer<AvcodecLibrary.AVResampleContext > av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff);
	public static native int av_resample(Pointer<AvcodecLibrary.AVResampleContext > c, Pointer<Short > dst, Pointer<Short > src, Pointer<Integer > consumed, int src_size, int dst_size, int update_ctx);
	public static native void av_resample_compensate(Pointer<AvcodecLibrary.AVResampleContext > c, int sample_delta, int compensation_distance);
	public static native void av_resample_close(Pointer<AvcodecLibrary.AVResampleContext > c);
	public static native int avpicture_alloc(Pointer<AVPicture > picture, PixelFormat pix_fmt, int width, int height);
	public static native void avpicture_free(Pointer<AVPicture > picture);
	public static native int avpicture_fill(Pointer<AVPicture > picture, Pointer<Byte > ptr, PixelFormat pix_fmt, int width, int height);
	public static native int avpicture_layout(Pointer<AVPicture > src, PixelFormat pix_fmt, int width, int height, Pointer<Byte > dest, int dest_size);
	public static native int avpicture_get_size(PixelFormat pix_fmt, int width, int height);
	public static native void avcodec_get_chroma_sub_sample(PixelFormat pix_fmt, Pointer<Integer > h_shift, Pointer<Integer > v_shift);
	public static native Pointer<Byte > avcodec_get_pix_fmt_name(PixelFormat pix_fmt);
	public static native void avcodec_set_dimensions(Pointer<AVCodecContext > s, int width, int height);
	public static native PixelFormat avcodec_get_pix_fmt(Pointer<Byte > name);
	public static native int avcodec_pix_fmt_to_codec_tag(PixelFormat pix_fmt);
	@Ptr 
	public static native long av_get_codec_tag_string(Pointer<Byte > buf, @Ptr long buf_size, int codec_tag);
	public static native int avcodec_get_pix_fmt_loss(PixelFormat dst_pix_fmt, PixelFormat src_pix_fmt, int has_alpha);
	public static native PixelFormat avcodec_find_best_pix_fmt(long pix_fmt_mask, PixelFormat src_pix_fmt, int has_alpha, Pointer<Integer > loss_ptr);
	public static native void avcodec_pix_fmt_string(Pointer<Byte > buf, int buf_size, PixelFormat pix_fmt);
	public static native int img_get_alpha_info(Pointer<AVPicture > src, PixelFormat pix_fmt, int width, int height);
	public static native int avpicture_deinterlace(Pointer<AVPicture > dst, Pointer<AVPicture > src, PixelFormat pix_fmt, int width, int height);
	public static native Pointer<AVCodec > av_codec_next(Pointer<AVCodec > c);
	public static native void avcodec_version();
	public static native Pointer<Byte > avcodec_configuration();
	public static native Pointer<Byte > avcodec_license();
	public static native void avcodec_init();
	public static native void register_avcodec(Pointer<AVCodec > codec);
	public static native void avcodec_register(Pointer<AVCodec > codec);
	public static native Pointer<AVCodec > avcodec_find_encoder(AvcodecLibrary.CodecID id);
	public static native Pointer<AVCodec > avcodec_find_encoder_by_name(Pointer<Byte > name);
	public static native Pointer<AVCodec > avcodec_find_decoder(AvcodecLibrary.CodecID id);
	public static native Pointer<AVCodec > avcodec_find_decoder_by_name(Pointer<Byte > name);
	public static native void avcodec_string(Pointer<Byte > buf, int buf_size, Pointer<AVCodecContext > enc, int encode);
	public static native Pointer<Byte > av_get_profile_name(Pointer<AVCodec > codec, int profile);
	public static native void avcodec_get_context_defaults(Pointer<AVCodecContext > s);
	public static native void avcodec_get_context_defaults2(Pointer<AVCodecContext > s, AvcodecLibrary.AVMediaType arg1);
	public static native int avcodec_get_context_defaults3(Pointer<AVCodecContext > s, Pointer<AVCodec > codec);
	public static native Pointer<AVCodecContext > avcodec_alloc_context();
	public static native Pointer<AVCodecContext > avcodec_alloc_context2(AvcodecLibrary.AVMediaType arg1);
	public static native Pointer<AVCodecContext > avcodec_alloc_context3(Pointer<AVCodec > codec);
	public static native int avcodec_copy_context(Pointer<AVCodecContext > dest, Pointer<AVCodecContext > src);
	public static native void avcodec_get_frame_defaults(Pointer<AVFrame > pic);
	public static native Pointer<AVFrame > avcodec_alloc_frame();
	public static native int avcodec_default_get_buffer(Pointer<AVCodecContext > s, Pointer<AVFrame > pic);
	public static native void avcodec_default_release_buffer(Pointer<AVCodecContext > s, Pointer<AVFrame > pic);
	public static native int avcodec_default_reget_buffer(Pointer<AVCodecContext > s, Pointer<AVFrame > pic);
	public static native void avcodec_get_edge_width();
	public static native void avcodec_align_dimensions(Pointer<AVCodecContext > s, Pointer<Integer > width, Pointer<Integer > height);
	public static native void avcodec_align_dimensions2(Pointer<AVCodecContext > s, Pointer<Integer > width, Pointer<Integer > height, Pointer<Integer > linesize_align);
	public static native int avcodec_check_dimensions(Pointer<? > av_log_ctx, int w, int h);
	public static native PixelFormat avcodec_default_get_format(Pointer<AVCodecContext > s, Pointer<PixelFormat > fmt);
	public static native int avcodec_thread_init(Pointer<AVCodecContext > s, int thread_count);
	public static native void avcodec_thread_free(Pointer<AVCodecContext > s);
	public static native int avcodec_default_execute(Pointer<AVCodecContext > c, Pointer<AvcodecLibrary.avcodec_default_execute_arg1_func_callback > arg1, Pointer<? > arg, Pointer<Integer > ret, int count, int size);
	public static native int avcodec_default_execute2(Pointer<AVCodecContext > c, Pointer<AvcodecLibrary.avcodec_default_execute2_arg1_func_callback > arg1, Pointer<? > arg, Pointer<Integer > ret, int count);
	public static native int avcodec_open(Pointer<AVCodecContext > avctx, Pointer<AVCodec > codec);
	public static native int avcodec_decode_audio2(Pointer<AVCodecContext > avctx, Pointer<Short > samples, Pointer<Integer > frame_size_ptr, Pointer<Byte > buf, int buf_size);
	public static native int avcodec_decode_audio3(Pointer<AVCodecContext > avctx, Pointer<Short > samples, Pointer<Integer > frame_size_ptr, Pointer<AVPacket > avpkt);
	public static native int avcodec_decode_video(Pointer<AVCodecContext > avctx, Pointer<AVFrame > picture, Pointer<Integer > got_picture_ptr, Pointer<Byte > buf, int buf_size);
	public static native int avcodec_decode_video2(Pointer<AVCodecContext > avctx, Pointer<AVFrame > picture, Pointer<Integer > got_picture_ptr, Pointer<AVPacket > avpkt);
	public static native int avcodec_decode_subtitle(Pointer<AVCodecContext > avctx, Pointer<AVSubtitle > sub, Pointer<Integer > got_sub_ptr, Pointer<Byte > buf, int buf_size);
	public static native int avcodec_decode_subtitle2(Pointer<AVCodecContext > avctx, Pointer<AVSubtitle > sub, Pointer<Integer > got_sub_ptr, Pointer<AVPacket > avpkt);
	public static native void avsubtitle_free(Pointer<AVSubtitle > sub);
	public static native int avcodec_parse_frame(Pointer<AVCodecContext > avctx, Pointer<Pointer<Byte > > pdata, Pointer<Integer > data_size_ptr, Pointer<Byte > buf, int buf_size);
	public static native int avcodec_encode_audio(Pointer<AVCodecContext > avctx, Pointer<Byte > buf, int buf_size, Pointer<Short > samples);
	public static native int avcodec_encode_video(Pointer<AVCodecContext > avctx, Pointer<Byte > buf, int buf_size, Pointer<AVFrame > pict);
	public static native int avcodec_encode_subtitle(Pointer<AVCodecContext > avctx, Pointer<Byte > buf, int buf_size, Pointer<AVSubtitle > sub);
	public static native int avcodec_close(Pointer<AVCodecContext > avctx);
	public static native void avcodec_register_all();
	public static native void avcodec_flush_buffers(Pointer<AVCodecContext > avctx);
	public static native void avcodec_default_free_buffers(Pointer<AVCodecContext > s);
	public static native byte av_get_pict_type_char(int pict_type);
	public static native int av_get_bits_per_sample(AvcodecLibrary.CodecID codec_id);
	public static native int av_get_bits_per_sample_format(AvcodecLibrary.AVSampleFormat sample_fmt);
	public static native Pointer<AVCodecParser > av_parser_next(Pointer<AVCodecParser > c);
	public static native void av_register_codec_parser(Pointer<AVCodecParser > parser);
	public static native Pointer<AVCodecParserContext > av_parser_init(int codec_id);
	public static native int av_parser_parse(Pointer<AVCodecParserContext > s, Pointer<AVCodecContext > avctx, Pointer<Pointer<Byte > > poutbuf, Pointer<Integer > poutbuf_size, Pointer<Byte > buf, int buf_size, long pts, long dts);
	public static native int av_parser_parse2(Pointer<AVCodecParserContext > s, Pointer<AVCodecContext > avctx, Pointer<Pointer<Byte > > poutbuf, Pointer<Integer > poutbuf_size, Pointer<Byte > buf, int buf_size, long pts, long dts, long pos);
	public static native int av_parser_change(Pointer<AVCodecParserContext > s, Pointer<AVCodecContext > avctx, Pointer<Pointer<Byte > > poutbuf, Pointer<Integer > poutbuf_size, Pointer<Byte > buf, int buf_size, int keyframe);
	public static native void av_parser_close(Pointer<AVCodecParserContext > s);
	public static native void av_register_bitstream_filter(Pointer<AVBitStreamFilter > bsf);
	public static native Pointer<AVBitStreamFilterContext > av_bitstream_filter_init(Pointer<Byte > name);
	public static native int av_bitstream_filter_filter(Pointer<AVBitStreamFilterContext > bsfc, Pointer<AVCodecContext > avctx, Pointer<Byte > args, Pointer<Pointer<Byte > > poutbuf, Pointer<Integer > poutbuf_size, Pointer<Byte > buf, int buf_size, int keyframe);
	public static native void av_bitstream_filter_close(Pointer<AVBitStreamFilterContext > bsf);
	public static native Pointer<AVBitStreamFilter > av_bitstream_filter_next(Pointer<AVBitStreamFilter > f);
	public static native Pointer<? > av_fast_realloc(Pointer<? > ptr, Pointer<Integer > size, int min_size);
	public static native void av_fast_malloc(Pointer<? > ptr, Pointer<Integer > size, int min_size);
	public static native void av_picture_data_copy(Pointer<Pointer<Byte > > dst_data, Pointer<Integer > dst_linesize, Pointer<Pointer<Byte > > src_data, Pointer<Integer > src_linesize, PixelFormat pix_fmt, int width, int height);
	public static native void av_picture_copy(Pointer<AVPicture > dst, Pointer<AVPicture > src, PixelFormat pix_fmt, int width, int height);
	public static native int av_picture_crop(Pointer<AVPicture > dst, Pointer<AVPicture > src, PixelFormat pix_fmt, int top_band, int left_band);
	public static native int av_picture_pad(Pointer<AVPicture > dst, Pointer<AVPicture > src, int height, int width, PixelFormat pix_fmt, int padtop, int padbottom, int padleft, int padright, Pointer<Integer > color);
	public static native int av_xiphlacing(Pointer<Byte > s, int v);
	public static native int av_parse_video_frame_size(Pointer<Integer > width_ptr, Pointer<Integer > height_ptr, Pointer<Byte > str);
	public static native int av_parse_video_frame_rate(Pointer<AVRational > frame_rate, Pointer<Byte > str);
	public static native void av_log_missing_feature(Pointer<? > avc, Pointer<Byte > feature, int want_sample);
	public static native void av_log_ask_for_sample(Pointer<? > avc, Pointer<Byte > msg);
	public static native void av_register_hwaccel(Pointer<AVHWAccel > hwaccel);
	public static native Pointer<AVHWAccel > av_hwaccel_next(Pointer<AVHWAccel > hwaccel);
	public static native int av_lockmgr_register(Pointer<AvcodecLibrary.av_lockmgr_register_arg1_cb_callback > arg1);
	/// Undefined type
	public static interface AVMediaType {
		
	};
	/// Undefined type
	public static interface AVResampleContext {
		
	};
	/// Undefined type
	public static interface AVSampleFormat {
		
	};
	/// Undefined type
	public static interface ReSampleContext {
		
	};
}
