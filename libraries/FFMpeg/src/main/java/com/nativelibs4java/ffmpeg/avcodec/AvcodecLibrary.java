package com.nativelibs4java.ffmpeg.avcodec;
import static com.nativelibs4java.ffmpeg.avcodec.AvcodecLibrary.*;
import static com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.*;
import com.nativelibs4java.ffmpeg.avutil.AVRational;
import static com.nativelibs4java.ffmpeg.avutil.AvutilLibrary.*;
import static com.nativelibs4java.ffmpeg.swscale.SwscaleLibrary.*;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ValuedEnum;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
/**
 * Wrapper for library <b>avcodec</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avcodec") 
@Runtime(CPPRuntime.class) 
public class AvcodecLibrary {
	static {
		BridJ.register();
	}
	public enum CodecID implements org.bridj.IntValuedEnum<CodecID > {
		CODEC_ID_NONE(0),
		CODEC_ID_MPEG1VIDEO(1),
		CODEC_ID_MPEG2VIDEO(2),
		CODEC_ID_MPEG2VIDEO_XVMC(3),
		CODEC_ID_H261(4),
		CODEC_ID_H263(5),
		CODEC_ID_RV10(6),
		CODEC_ID_RV20(7),
		CODEC_ID_MJPEG(8),
		CODEC_ID_MJPEGB(9),
		CODEC_ID_LJPEG(10),
		CODEC_ID_SP5X(11),
		CODEC_ID_JPEGLS(12),
		CODEC_ID_MPEG4(13),
		CODEC_ID_RAWVIDEO(14),
		CODEC_ID_MSMPEG4V1(15),
		CODEC_ID_MSMPEG4V2(16),
		CODEC_ID_MSMPEG4V3(17),
		CODEC_ID_WMV1(18),
		CODEC_ID_WMV2(19),
		CODEC_ID_H263P(20),
		CODEC_ID_H263I(21),
		CODEC_ID_FLV1(22),
		CODEC_ID_SVQ1(23),
		CODEC_ID_SVQ3(24),
		CODEC_ID_DVVIDEO(25),
		CODEC_ID_HUFFYUV(26),
		CODEC_ID_CYUV(27),
		CODEC_ID_H264(28),
		CODEC_ID_INDEO3(29),
		CODEC_ID_VP3(30),
		CODEC_ID_THEORA(31),
		CODEC_ID_ASV1(32),
		CODEC_ID_ASV2(33),
		CODEC_ID_FFV1(34),
		CODEC_ID_4XM(35),
		CODEC_ID_VCR1(36),
		CODEC_ID_CLJR(37),
		CODEC_ID_MDEC(38),
		CODEC_ID_ROQ(39),
		CODEC_ID_INTERPLAY_VIDEO(40),
		CODEC_ID_XAN_WC3(41),
		CODEC_ID_XAN_WC4(42),
		CODEC_ID_RPZA(43),
		CODEC_ID_CINEPAK(44),
		CODEC_ID_WS_VQA(45),
		CODEC_ID_MSRLE(46),
		CODEC_ID_MSVIDEO1(47),
		CODEC_ID_IDCIN(48),
		CODEC_ID_8BPS(49),
		CODEC_ID_SMC(50),
		CODEC_ID_FLIC(51),
		CODEC_ID_TRUEMOTION1(52),
		CODEC_ID_VMDVIDEO(53),
		CODEC_ID_MSZH(54),
		CODEC_ID_ZLIB(55),
		CODEC_ID_QTRLE(56),
		CODEC_ID_SNOW(57),
		CODEC_ID_TSCC(58),
		CODEC_ID_ULTI(59),
		CODEC_ID_QDRAW(60),
		CODEC_ID_VIXL(61),
		CODEC_ID_QPEG(62),
		CODEC_ID_XVID(63),
		CODEC_ID_PNG(64),
		CODEC_ID_PPM(65),
		CODEC_ID_PBM(66),
		CODEC_ID_PGM(67),
		CODEC_ID_PGMYUV(68),
		CODEC_ID_PAM(69),
		CODEC_ID_FFVHUFF(70),
		CODEC_ID_RV30(71),
		CODEC_ID_RV40(72),
		CODEC_ID_VC1(73),
		CODEC_ID_WMV3(74),
		CODEC_ID_LOCO(75),
		CODEC_ID_WNV1(76),
		CODEC_ID_AASC(77),
		CODEC_ID_INDEO2(78),
		CODEC_ID_FRAPS(79),
		CODEC_ID_TRUEMOTION2(80),
		CODEC_ID_BMP(81),
		CODEC_ID_CSCD(82),
		CODEC_ID_MMVIDEO(83),
		CODEC_ID_ZMBV(84),
		CODEC_ID_AVS(85),
		CODEC_ID_SMACKVIDEO(86),
		CODEC_ID_NUV(87),
		CODEC_ID_KMVC(88),
		CODEC_ID_FLASHSV(89),
		CODEC_ID_CAVS(90),
		CODEC_ID_JPEG2000(91),
		CODEC_ID_VMNC(92),
		CODEC_ID_VP5(93),
		CODEC_ID_VP6(94),
		CODEC_ID_VP6F(95),
		CODEC_ID_TARGA(96),
		CODEC_ID_DSICINVIDEO(97),
		CODEC_ID_TIERTEXSEQVIDEO(98),
		CODEC_ID_TIFF(99),
		CODEC_ID_GIF(100),
		CODEC_ID_FFH264(101),
		CODEC_ID_DXA(102),
		CODEC_ID_DNXHD(103),
		CODEC_ID_THP(104),
		CODEC_ID_SGI(105),
		CODEC_ID_C93(106),
		CODEC_ID_BETHSOFTVID(107),
		CODEC_ID_PTX(108),
		CODEC_ID_TXD(109),
		CODEC_ID_VP6A(110),
		CODEC_ID_AMV(111),
		CODEC_ID_VB(112),
		CODEC_ID_PCX(113),
		CODEC_ID_SUNRAST(114),
		CODEC_ID_INDEO4(115),
		CODEC_ID_INDEO5(116),
		CODEC_ID_MIMIC(117),
		CODEC_ID_RL2(118),
		CODEC_ID_8SVX_EXP(119),
		CODEC_ID_8SVX_FIB(120),
		CODEC_ID_ESCAPE124(121),
		CODEC_ID_DIRAC(122),
		CODEC_ID_BFI(123),
		CODEC_ID_CMV(124),
		CODEC_ID_MOTIONPIXELS(125),
		CODEC_ID_TGV(126),
		CODEC_ID_TGQ(127),
		CODEC_ID_TQI(128),
		CODEC_ID_AURA(129),
		CODEC_ID_AURA2(130),
		CODEC_ID_V210X(131),
		CODEC_ID_TMV(132),
		CODEC_ID_V210(133),
		CODEC_ID_DPX(134),
		CODEC_ID_MAD(135),
		CODEC_ID_FRWU(136),
		CODEC_ID_FLASHSV2(137),
		CODEC_ID_CDGRAPHICS(138),
		CODEC_ID_R210(139),
		CODEC_ID_ANM(140),
		CODEC_ID_BINKVIDEO(141),
		CODEC_ID_IFF_ILBM(142),
		CODEC_ID_IFF_BYTERUN1(143),
		CODEC_ID_KGV1(144),
		CODEC_ID_YOP(145),
		CODEC_ID_VP8(146),
		CODEC_ID_PCM_S16LE(0x10000),
		CODEC_ID_PCM_S16BE(65537),
		CODEC_ID_PCM_U16LE(65538),
		CODEC_ID_PCM_U16BE(65539),
		CODEC_ID_PCM_S8(65540),
		CODEC_ID_PCM_U8(65541),
		CODEC_ID_PCM_MULAW(65542),
		CODEC_ID_PCM_ALAW(65543),
		CODEC_ID_PCM_S32LE(65544),
		CODEC_ID_PCM_S32BE(65545),
		CODEC_ID_PCM_U32LE(65546),
		CODEC_ID_PCM_U32BE(65547),
		CODEC_ID_PCM_S24LE(65548),
		CODEC_ID_PCM_S24BE(65549),
		CODEC_ID_PCM_U24LE(65550),
		CODEC_ID_PCM_U24BE(65551),
		CODEC_ID_PCM_S24DAUD(65552),
		CODEC_ID_PCM_ZORK(65553),
		CODEC_ID_PCM_S16LE_PLANAR(65554),
		CODEC_ID_PCM_DVD(65555),
		CODEC_ID_PCM_F32BE(65556),
		CODEC_ID_PCM_F32LE(65557),
		CODEC_ID_PCM_F64BE(65558),
		CODEC_ID_PCM_F64LE(65559),
		CODEC_ID_PCM_BLURAY(65560),
		CODEC_ID_ADPCM_IMA_QT(0x11000),
		CODEC_ID_ADPCM_IMA_WAV(69633),
		CODEC_ID_ADPCM_IMA_DK3(69634),
		CODEC_ID_ADPCM_IMA_DK4(69635),
		CODEC_ID_ADPCM_IMA_WS(69636),
		CODEC_ID_ADPCM_IMA_SMJPEG(69637),
		CODEC_ID_ADPCM_MS(69638),
		CODEC_ID_ADPCM_4XM(69639),
		CODEC_ID_ADPCM_XA(69640),
		CODEC_ID_ADPCM_ADX(69641),
		CODEC_ID_ADPCM_EA(69642),
		CODEC_ID_ADPCM_G726(69643),
		CODEC_ID_ADPCM_CT(69644),
		CODEC_ID_ADPCM_SWF(69645),
		CODEC_ID_ADPCM_YAMAHA(69646),
		CODEC_ID_ADPCM_SBPRO_4(69647),
		CODEC_ID_ADPCM_SBPRO_3(69648),
		CODEC_ID_ADPCM_SBPRO_2(69649),
		CODEC_ID_ADPCM_THP(69650),
		CODEC_ID_ADPCM_IMA_AMV(69651),
		CODEC_ID_ADPCM_EA_R1(69652),
		CODEC_ID_ADPCM_EA_R3(69653),
		CODEC_ID_ADPCM_EA_R2(69654),
		CODEC_ID_ADPCM_IMA_EA_SEAD(69655),
		CODEC_ID_ADPCM_IMA_EA_EACS(69656),
		CODEC_ID_ADPCM_EA_XAS(69657),
		CODEC_ID_ADPCM_EA_MAXIS_XA(69658),
		CODEC_ID_ADPCM_IMA_ISS(69659),
		CODEC_ID_AMR_NB(0x12000),
		CODEC_ID_AMR_WB(73729),
		CODEC_ID_RA_144(0x13000),
		CODEC_ID_RA_288(77825),
		CODEC_ID_ROQ_DPCM(0x14000),
		CODEC_ID_INTERPLAY_DPCM(81921),
		CODEC_ID_XAN_DPCM(81922),
		CODEC_ID_SOL_DPCM(81923),
		CODEC_ID_MP2(0x15000),
		CODEC_ID_MP3(86017),
		CODEC_ID_AAC(86018),
		CODEC_ID_AC3(86019),
		CODEC_ID_DTS(86020),
		CODEC_ID_VORBIS(86021),
		CODEC_ID_DVAUDIO(86022),
		CODEC_ID_WMAV1(86023),
		CODEC_ID_WMAV2(86024),
		CODEC_ID_MACE3(86025),
		CODEC_ID_MACE6(86026),
		CODEC_ID_VMDAUDIO(86027),
		CODEC_ID_SONIC(86028),
		CODEC_ID_SONIC_LS(86029),
		CODEC_ID_FLAC(86030),
		CODEC_ID_MP3ADU(86031),
		CODEC_ID_MP3ON4(86032),
		CODEC_ID_SHORTEN(86033),
		CODEC_ID_ALAC(86034),
		CODEC_ID_WESTWOOD_SND1(86035),
		CODEC_ID_GSM(86036),
		CODEC_ID_QDM2(86037),
		CODEC_ID_COOK(86038),
		CODEC_ID_TRUESPEECH(86039),
		CODEC_ID_TTA(86040),
		CODEC_ID_SMACKAUDIO(86041),
		CODEC_ID_QCELP(86042),
		CODEC_ID_WAVPACK(86043),
		CODEC_ID_DSICINAUDIO(86044),
		CODEC_ID_IMC(86045),
		CODEC_ID_MUSEPACK7(86046),
		CODEC_ID_MLP(86047),
		CODEC_ID_GSM_MS(86048),
		CODEC_ID_ATRAC3(86049),
		CODEC_ID_VOXWARE(86050),
		CODEC_ID_APE(86051),
		CODEC_ID_NELLYMOSER(86052),
		CODEC_ID_MUSEPACK8(86053),
		CODEC_ID_SPEEX(86054),
		CODEC_ID_WMAVOICE(86055),
		CODEC_ID_WMAPRO(86056),
		CODEC_ID_WMALOSSLESS(86057),
		CODEC_ID_ATRAC3P(86058),
		CODEC_ID_EAC3(86059),
		CODEC_ID_SIPR(86060),
		CODEC_ID_MP1(86061),
		CODEC_ID_TWINVQ(86062),
		CODEC_ID_TRUEHD(86063),
		CODEC_ID_MP4ALS(86064),
		CODEC_ID_ATRAC1(86065),
		CODEC_ID_BINKAUDIO_RDFT(86066),
		CODEC_ID_BINKAUDIO_DCT(86067),
		CODEC_ID_DVD_SUBTITLE(0x17000),
		CODEC_ID_DVB_SUBTITLE(94209),
		CODEC_ID_TEXT(94210),
		CODEC_ID_XSUB(94211),
		CODEC_ID_SSA(94212),
		CODEC_ID_MOV_TEXT(94213),
		CODEC_ID_HDMV_PGS_SUBTITLE(94214),
		CODEC_ID_DVB_TELETEXT(94215),
		CODEC_ID_TTF(0x18000),
		CODEC_ID_PROBE(0x19000),
		CODEC_ID_MPEG2TS(0x20000);
		CodecID(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<CodecID > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<CodecID > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum SampleFormat implements org.bridj.IntValuedEnum<SampleFormat > {
		SAMPLE_FMT_NONE(-1),
		SAMPLE_FMT_U8(0),
		SAMPLE_FMT_S16(1),
		SAMPLE_FMT_S32(2),
		SAMPLE_FMT_FLT(3),
		SAMPLE_FMT_DBL(4),
		SAMPLE_FMT_NB(5);
		SampleFormat(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<SampleFormat > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<SampleFormat > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum Motion_Est_ID implements org.bridj.IntValuedEnum<Motion_Est_ID > {
		ME_ZERO(1),
		ME_FULL(2),
		ME_LOG(3),
		ME_PHODS(4),
		ME_EPZS(5),
		ME_X1(6),
		ME_HEX(7),
		ME_UMH(8),
		ME_ITER(9),
		ME_TESA(10);
		Motion_Est_ID(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<Motion_Est_ID > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<Motion_Est_ID > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVDiscard implements org.bridj.IntValuedEnum<AVDiscard > {
		AVDISCARD_NONE(-16),
		AVDISCARD_DEFAULT(0),
		AVDISCARD_NONREF(8),
		AVDISCARD_BIDIR(16),
		AVDISCARD_NONKEY(32),
		AVDISCARD_ALL(48);
		AVDiscard(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVDiscard > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVDiscard > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorPrimaries implements org.bridj.IntValuedEnum<AVColorPrimaries > {
		AVCOL_PRI_BT709(1),
		AVCOL_PRI_UNSPECIFIED(2),
		AVCOL_PRI_BT470M(4),
		AVCOL_PRI_BT470BG(5),
		AVCOL_PRI_SMPTE170M(6),
		AVCOL_PRI_SMPTE240M(7),
		AVCOL_PRI_FILM(8),
		AVCOL_PRI_NB(9);
		AVColorPrimaries(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorPrimaries > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorPrimaries > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorTransferCharacteristic implements org.bridj.IntValuedEnum<AVColorTransferCharacteristic > {
		AVCOL_TRC_BT709(1),
		AVCOL_TRC_UNSPECIFIED(2),
		AVCOL_TRC_GAMMA22(4),
		AVCOL_TRC_GAMMA28(5),
		AVCOL_TRC_NB(6);
		AVColorTransferCharacteristic(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorTransferCharacteristic > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorTransferCharacteristic > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorSpace implements org.bridj.IntValuedEnum<AVColorSpace > {
		AVCOL_SPC_RGB(0),
		AVCOL_SPC_BT709(1),
		AVCOL_SPC_UNSPECIFIED(2),
		AVCOL_SPC_FCC(4),
		AVCOL_SPC_BT470BG(5),
		AVCOL_SPC_SMPTE170M(6),
		AVCOL_SPC_SMPTE240M(7),
		AVCOL_SPC_NB(8);
		AVColorSpace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorSpace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorSpace > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVColorRange implements org.bridj.IntValuedEnum<AVColorRange > {
		AVCOL_RANGE_UNSPECIFIED(0),
		AVCOL_RANGE_MPEG(1),
		AVCOL_RANGE_JPEG(2),
		AVCOL_RANGE_NB(3);
		AVColorRange(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVColorRange > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVColorRange > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVChromaLocation implements org.bridj.IntValuedEnum<AVChromaLocation > {
		AVCHROMA_LOC_UNSPECIFIED(0),
		AVCHROMA_LOC_LEFT(1),
		AVCHROMA_LOC_CENTER(2),
		AVCHROMA_LOC_TOPLEFT(3),
		AVCHROMA_LOC_TOP(4),
		AVCHROMA_LOC_BOTTOMLEFT(5),
		AVCHROMA_LOC_BOTTOM(6),
		AVCHROMA_LOC_NB(7);
		AVChromaLocation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVChromaLocation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVChromaLocation > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVSubtitleType implements org.bridj.IntValuedEnum<AVSubtitleType > {
		SUBTITLE_NONE(0),
		SUBTITLE_BITMAP(1),
		SUBTITLE_TEXT(2),
		SUBTITLE_ASS(3);
		AVSubtitleType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVSubtitleType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVSubtitleType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum AVLockOp implements org.bridj.IntValuedEnum<AVLockOp > {
		AV_LOCK_CREATE(0),
		AV_LOCK_OBTAIN(1),
		AV_LOCK_RELEASE(2),
		AV_LOCK_DESTROY(3);
		AVLockOp(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVLockOp > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVLockOp > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_CLOSED_GOP = -2147483648;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_STRICT_GOP = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_ALTIVEC = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BUFFERS = 32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_I8X8 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AMV = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GRAY = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_16x8 = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_BITS = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVPALETTE_SIZE = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_EMU_EDGE = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_MLIB = 6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_P4X4 = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_SIMPLE = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_SVCD_SCAN_OFFSET = 1073741824;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_CAREFUL = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_FRONT_LEFT_OF_CENTER = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_AUD = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_16_9_SP_14_9 = 14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P0L1 = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH = 100;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_ALLOW_PLANE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_RESOLUTION = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_PSNR = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_14_9 = 11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_BITEXACT = 8388608;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_CHROMA = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_INT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_SLICE_STRUCT = 268435456;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_MMX2 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_LOW_DELAY = 524288;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P0L0 = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INTERLACED_ME = 536870912;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_DEPTH = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_EA = 21;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_QP = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_MPEG1 = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_MPEG2 = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_ARM = 7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_RC = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_IPP = 13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_XVIDMMX = 14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_QUANT = 65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_SIDE_LEFT = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_RD = 6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_WPRED = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_I4X4 = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DRAW_HORIZ_BAND = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_MMX = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_TRUNCATED = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_XVID_ILACE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_CAVS = 15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_AUTO = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_RC_STRATEGY_XVID = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA4x4 = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_DEFLATE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_LTP = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEVIS = 18;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_ALT_SCAN = 1048576;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AV_PARSER_PTS_NB = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_ALPHA = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_LOW = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_BACK_RIGHT = 131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_SUBFRAMES = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_EXTERN_HUFF = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_EXPERIMENTAL = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_INTRA_VLC = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_B_BACK = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_IWMMXT = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_BACK_CENTER = 65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ASPECT_EXTENDED = 15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MB_DECISION_RD = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_W97 = 12;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARMV6 = 17;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QP2LAMBDA = 118;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_AC = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_INOFFICIAL = -1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_NON_LINEAR_QUANT = 65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_CENTER = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DR1 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_QPEL_CHROMA = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_W53 = 11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_STD_QPEL = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_WMV2 = 19;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_INT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA16x16 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_VP3 = 12;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_SAME = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_USER = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_UMV = 33554432;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEALPHA = 23;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BIT_RESERVOIR = 131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_P_TYPE = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QSCALE = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_ACPRED = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_COPY = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INPUT_PRESERVED = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVPALETTE_COUNT = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPRESSION_DEFAULT = -1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_VERY_AGGRESSIVE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_EXTENDED = 88;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_LIBMPEG2MMX = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_NORMAL = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_FRONT_LEFT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_HWACCEL = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_FASTPSKIP = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_MMXEXT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_FORCE = -2147483648;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_BACK_LEFT = 32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCT = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARM = 10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_3DNOW = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GLOBAL_HEADER = 4194304;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MAJOR = 52;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_SMALL_LAST_FRAME = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_COLORSPACE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_H264 = 11;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ALPHA_SEMI_TRANSP = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_FRONT_RIGHT = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_4_3_SP_14_9 = 13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_ALTIVEC = 5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AC_VLC = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_NO_PADDING = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCTMAX = 13;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLE = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_UNKNOWN = -99;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_FRONT_LEFT = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTRA_PCM = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_B8X8 = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_ZERO = 7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LAMBDA_SHIFT = 7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_GMC = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_DIRECT_BLOCKSIZE = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_FRONT_RIGHT_OF_CENTER = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_EC_GUESS_MVS = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MICRO = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_CHROMA = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_CBP_RD = 67108864;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BUGS = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_TOP_FRONT_CENTER = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_FLOAT = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_S_TYPE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_ER = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_RLE = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_VLC = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_QPEL_CHROMA2 = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_SP_TYPE = 6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MIXED_REFS = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_VERY_STRICT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LAMBDA_MAX = (256 * 128 - 1);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_INTERNAL = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_8x16 = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_444 = 244;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_TRUNCATED = 65536;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SSE = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_STARTCODE = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_PRESERVE = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PART = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_422 = 122;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_B_TYPE = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LEVEL_UNKNOWN = -99;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_NO_OUTPUT = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SH4 = 9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_INPUT_BUFFER_PADDING_SIZE = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_16_9 = 10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_BACK_RIGHT = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_AUTO = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_INTERLACED_DCT = 262144;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MV = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_ALTIVEC = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PASS2 = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PASS1 = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEMMX = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_PLANE = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MB_TYPE = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_BACK_CENTER = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_COMPLIANT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_VSSE = 9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLEARMV5TE = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_NSSE = 10;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSE42 = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_MMX = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PARSER_FLAG_COMPLETE_FRAMES = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SATD = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_FRONT_CENTER = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_STEREO_RIGHT = 1073741824;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_DCT_COEFF = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_SAD = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_MLIB = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_SKIP_RD = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LOSS_COLORQUANT = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CODER_TYPE_RAW = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_ALLOW_FIELD = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_REUSABLE = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MB_TYPE = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_3DNOWEXT = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_SSIM = 1048576;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ER_AGGRESSIVE = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_CBP = 131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AV_TIME_BASE = 1000000;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_TRUNCATED = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_AUTO = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_VP56 = 3;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEFAULT_QUANT_BIAS = 999999;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSSE3 = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_BASELINE = 66;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_GMC = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSE2 = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSE3 = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSE4 = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MBTREE = 262144;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AVCODEC_MAX_AUDIO_FRAME_SIZE = 192000;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_4MV = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_LOCAL_HEADER = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_AA_FASTINT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_OLD_MSMPEG4 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_PICT_INFO = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_INT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_SIMPLENEON = 22;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_PS2 = 5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BRDO = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_SI_TYPE = 5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_NORMALIZE_AQP = 131072;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MAX_B_FRAMES = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int LIBAVCODEC_VERSION_MINOR = 72;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MIN_BUFFER_SIZE = 16384;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_DC_CLIP = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_8x8 = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_PSY = 524288;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_CAVLC_444 = 44;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int SLICE_FLAG_CODED_ORDER = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P1L1 = 32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_P1L0 = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_HIGH_10 = 110;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final java.lang.String LIBAVCODEC_IDENT = "Lavc";
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_BINK = 24;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_MV0 = 64;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_INTERLACED = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_STEREO_LEFT = 536870912;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_B_FOR = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_MM_SSE = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int AV_PKT_FLAG_KEY = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_MEMC_ONLY = 4096;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_SP_4_3 = 15;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_MMCO = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_STRICT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_HPEL_CHROMA = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_QP = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_BITSTREAM = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_DCT264 = 14;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_EC_DEBLOCK = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_16x16 = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_MAIN = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_EDGE = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_HWACCEL_VDPAU = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_FAST = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_CHUNKS = 32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_MS = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QP_RD = 134217728;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_IDCT_FAAN = 20;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_VALID = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_DIRECT2 = 256;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_LEFT = 0;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_HINTS_READABLE = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_I_TYPE = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_QPEL = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_H264_MAIN = 77;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUFFER_TYPE_SHARED = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_DELAY = 32;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_AUTODETECT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_OBMC = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_COMPLIANCE_EXPERIMENTAL = -2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_SIDE_RIGHT = 1024;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_VIS_MV_P_FOR = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_BPYRAMID = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PROFILE_AAC_SSR = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_BACK_LEFT = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_PSNR = 32768;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_SKIP = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int X264_PART_P8X8 = 16;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_H263P_AIV = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_FAAN = 6;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_FRONT_RIGHT = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_8X8DCT = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_LOW_FREQUENCY = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_QSCALE_TYPE_H264 = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_SKIP = 128;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_BIT = 5;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DEBUG_PTS = 512;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DTG_AFD_4_3 = 9;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_LOOP_FILTER = 2048;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_CMP_VSAD = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_CAP_PARSE_ONLY = 4;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG2_DROP_FRAME_TIMECODE = 8192;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_DCT_FASTINT = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CODEC_FLAG_AC_PRED = 16777216;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BUG_UMP4 = 8;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_PRED_MEDIAN = 2;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_BI_TYPE = 7;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_ALPHA_TRANSP = 1;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_L0 = (AvcodecLibrary.MB_TYPE_P0L0 | AvcodecLibrary.MB_TYPE_P1L0);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_LAYOUT_STEREO_DOWNMIX = (AvcodecLibrary.CH_STEREO_LEFT | AvcodecLibrary.CH_STEREO_RIGHT);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_LAYOUT_MONO = (AvcodecLibrary.CH_FRONT_CENTER);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int CH_LAYOUT_STEREO = (AvcodecLibrary.CH_FRONT_LEFT | AvcodecLibrary.CH_FRONT_RIGHT);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int PKT_FLAG_KEY = AvcodecLibrary.AV_PKT_FLAG_KEY;
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int MB_TYPE_L1 = (AvcodecLibrary.MB_TYPE_P0L1 | AvcodecLibrary.MB_TYPE_P1L1);
	/// <i>native declaration : libavcodec/avcodec.h</i>
	public static final int FF_LAMBDA_SCALE = (1 << AvcodecLibrary.FF_LAMBDA_SHIFT);
	/// <i>native declaration : libavcodec/avcodec.h:3341</i>
	public static abstract class func extends org.bridj.Callback<func > {
		public abstract int apply(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > c2, Pointer<? > arg2);
	};
	/// <i>native declaration : libavcodec/avcodec.h:3342</i>
	public static abstract class func2 extends org.bridj.Callback<func2 > {
		public abstract int apply(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > c2, Pointer<? > arg2, int int1, int int2);
	};
	/// <i>native declaration : libavcodec/avcodec.h:3964</i>
	public static abstract class cb extends org.bridj.Callback<cb > {
		public abstract int apply(Pointer<Pointer<? > > mutex, ValuedEnum<AvcodecLibrary.AVLockOp > op);
	};
	public native static void av_destruct_packet_nofree(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt);
	public native static void av_destruct_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt);
	public native static void av_init_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt);
	public native static int av_new_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt, int size);
	public native static void av_shrink_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt, int size);
	public native static int av_dup_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt);
	public native static void av_free_packet(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > pkt);
	public native static AvcodecLibrary.ReSampleContext audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate);
	public native static AvcodecLibrary.ReSampleContext av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_out, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff);
	@Name("audio_resample_init")
	public native static @Ptr long audio_resample_init$direct(int output_channels, int input_channels, int output_rate, int input_rate);
    @Name("av_audio_resample_init")
	public native static @Ptr long av_audio_resample_init$direct(int output_channels, int input_channels, int output_rate, int input_rate, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_out, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff);
	public native static int audio_resample(AvcodecLibrary.ReSampleContext s, Pointer<java.lang.Short > output, Pointer<java.lang.Short > input, int nb_samples);
	public native static void audio_resample_close(AvcodecLibrary.ReSampleContext s);
	public native static AvcodecLibrary.AVResampleContext av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff);
	@Name("av_resample_init")
	public native static @Ptr long av_resample_init$direct(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff);
	public native static int av_resample(AvcodecLibrary.AVResampleContext c, Pointer<java.lang.Short > dst, Pointer<java.lang.Short > src, Pointer<java.lang.Integer > consumed, int src_size, int dst_size, int update_ctx);
	public native static void av_resample_compensate(AvcodecLibrary.AVResampleContext c, int sample_delta, int compensation_distance);
	public native static void av_resample_close(AvcodecLibrary.AVResampleContext c);
	public native static int avpicture_alloc(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > picture, ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static void avpicture_free(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > picture);
	public native static int avpicture_fill(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > picture, Pointer<java.lang.Byte > ptr, ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static int avpicture_layout(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, ValuedEnum<PixelFormat > pix_fmt, int width, int height, Pointer<java.lang.Byte > dest, int dest_size);
	public native static int avpicture_get_size(ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static void avcodec_get_chroma_sub_sample(ValuedEnum<PixelFormat > pix_fmt, Pointer<java.lang.Integer > h_shift, Pointer<java.lang.Integer > v_shift);
	public native static Pointer<java.lang.Byte > avcodec_get_pix_fmt_name(ValuedEnum<PixelFormat > pix_fmt);
	public native static void avcodec_set_dimensions(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, int width, int height);
	public native static ValuedEnum<PixelFormat > avcodec_get_pix_fmt(Pointer<java.lang.Byte > name);
	public native static int avcodec_pix_fmt_to_codec_tag(ValuedEnum<PixelFormat > pix_fmt);
	public native static int avcodec_get_pix_fmt_loss(ValuedEnum<PixelFormat > dst_pix_fmt, ValuedEnum<PixelFormat > src_pix_fmt, int has_alpha);
	public native static ValuedEnum<PixelFormat > avcodec_find_best_pix_fmt(long pix_fmt_mask, ValuedEnum<PixelFormat > src_pix_fmt, int has_alpha, Pointer<java.lang.Integer > loss_ptr);
	public native static void avcodec_pix_fmt_string(Pointer<java.lang.Byte > buf, int buf_size, ValuedEnum<PixelFormat > pix_fmt);
	public native static int img_get_alpha_info(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static int avpicture_deinterlace(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > dst, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > av_codec_next(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > c);
	public native static void avcodec_version();
	public native static Pointer<java.lang.Byte > avcodec_configuration();
	public native static Pointer<java.lang.Byte > avcodec_license();
	public native static void avcodec_init();
	public native static void register_avcodec(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > codec);
	public native static void avcodec_register(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > codec);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > avcodec_find_encoder(ValuedEnum<CodecID > id);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > avcodec_find_encoder_by_name(Pointer<java.lang.Byte > name);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > avcodec_find_decoder(ValuedEnum<CodecID > id);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > avcodec_find_decoder_by_name(Pointer<java.lang.Byte > name);
	public native static void avcodec_string(Pointer<java.lang.Byte > buf, int buf_size, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > enc, int encode);
	public native static void avcodec_get_context_defaults(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s);
	public native static void avcodec_get_context_defaults2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, ValuedEnum<AVMediaType > arg1);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avcodec_alloc_context();
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avcodec_alloc_context2(ValuedEnum<AVMediaType > arg1);
	public native static int avcodec_copy_context(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > dest, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > src);
	public native static void avcodec_get_frame_defaults(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > pic);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > avcodec_alloc_frame();
	public native static int avcodec_default_get_buffer(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > pic);
	public native static void avcodec_default_release_buffer(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > pic);
	public native static int avcodec_default_reget_buffer(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > pic);
	public native static void avcodec_get_edge_width();
	public native static void avcodec_align_dimensions(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<java.lang.Integer > width, Pointer<java.lang.Integer > height);
	public native static void avcodec_align_dimensions2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<java.lang.Integer > width, Pointer<java.lang.Integer > height, Pointer<java.lang.Integer > linesize_align);
	public native static int avcodec_check_dimensions(Pointer<? > av_log_ctx, int w, int h);
	public native static ValuedEnum<PixelFormat > avcodec_default_get_format(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, Pointer<ValuedEnum<PixelFormat > > fmt);
	public native static int avcodec_thread_init(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s, int thread_count);
	public native static void avcodec_thread_free(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s);
	public native static int avcodec_default_execute(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > c, Pointer<AvcodecLibrary.func > arg1, Pointer<? > arg, Pointer<java.lang.Integer > ret, int count, int size);
	public native static int avcodec_default_execute2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > c, Pointer<AvcodecLibrary.func > arg1, Pointer<? > arg, Pointer<java.lang.Integer > ret, int count);
	public native static int avcodec_open(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodec > codec);
	public native static int avcodec_decode_audio2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Short > samples, Pointer<java.lang.Integer > frame_size_ptr, Pointer<java.lang.Byte > buf, int buf_size);
	public native static int avcodec_decode_audio3(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Short > samples, Pointer<java.lang.Integer > frame_size_ptr, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > avpkt);
	public native static int avcodec_decode_video(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > picture, Pointer<java.lang.Integer > got_picture_ptr, Pointer<java.lang.Byte > buf, int buf_size);
	public native static int avcodec_decode_video2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > picture, Pointer<java.lang.Integer > got_picture_ptr, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > avpkt);
	public native static int avcodec_decode_subtitle(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVSubtitle > sub, Pointer<java.lang.Integer > got_sub_ptr, Pointer<java.lang.Byte > buf, int buf_size);
	public native static int avcodec_decode_subtitle2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVSubtitle > sub, Pointer<java.lang.Integer > got_sub_ptr, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPacket > avpkt);
	public native static int avcodec_parse_frame(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<Pointer<java.lang.Byte > > pdata, Pointer<java.lang.Integer > data_size_ptr, Pointer<java.lang.Byte > buf, int buf_size);
	public native static int avcodec_encode_audio(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Byte > buf, int buf_size, Pointer<java.lang.Short > samples);
	public native static int avcodec_encode_video(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Byte > buf, int buf_size, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVFrame > pict);
	public native static int avcodec_encode_subtitle(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Byte > buf, int buf_size, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVSubtitle > sub);
	public native static int avcodec_close(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx);
	public native static void avcodec_register_all();
	public native static void avcodec_flush_buffers(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx);
	public native static void avcodec_default_free_buffers(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > s);
	public native static byte av_get_pict_type_char(int pict_type);
	public native static int av_get_bits_per_sample(ValuedEnum<CodecID > codec_id);
	public native static int av_get_bits_per_sample_format(ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParser > av_parser_next(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParser > c);
	public native static void av_register_codec_parser(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParser > parser);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext > av_parser_init(int codec_id);
	public native static int av_parser_parse(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<Pointer<java.lang.Byte > > poutbuf, Pointer<java.lang.Integer > poutbuf_size, Pointer<java.lang.Byte > buf, int buf_size, long pts, long dts);
	public native static int av_parser_parse2(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<Pointer<java.lang.Byte > > poutbuf, Pointer<java.lang.Integer > poutbuf_size, Pointer<java.lang.Byte > buf, int buf_size, long pts, long dts, long pos);
	public native static int av_parser_change(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext > s, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<Pointer<java.lang.Byte > > poutbuf, Pointer<java.lang.Integer > poutbuf_size, Pointer<java.lang.Byte > buf, int buf_size, int keyframe);
	public native static void av_parser_close(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext > s);
	public native static void av_register_bitstream_filter(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilter > bsf);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilterContext > av_bitstream_filter_init(Pointer<java.lang.Byte > name);
	public native static int av_bitstream_filter_filter(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilterContext > bsfc, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVCodecContext > avctx, Pointer<java.lang.Byte > args, Pointer<Pointer<java.lang.Byte > > poutbuf, Pointer<java.lang.Integer > poutbuf_size, Pointer<java.lang.Byte > buf, int buf_size, int keyframe);
	public native static void av_bitstream_filter_close(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilterContext > bsf);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilter > av_bitstream_filter_next(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVBitStreamFilter > f);
	public native static Pointer<? > av_fast_realloc(Pointer<? > ptr, Pointer<java.lang.Integer > size, int min_size);
	public native static void av_fast_malloc(Pointer<? > ptr, Pointer<java.lang.Integer > size, int min_size);
	public native static void av_picture_copy(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > dst, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, ValuedEnum<PixelFormat > pix_fmt, int width, int height);
	public native static int av_picture_crop(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > dst, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, ValuedEnum<PixelFormat > pix_fmt, int top_band, int left_band);
	public native static int av_picture_pad(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > dst, Pointer<com.nativelibs4java.ffmpeg.avcodec.AVPicture > src, int height, int width, ValuedEnum<PixelFormat > pix_fmt, int padtop, int padbottom, int padleft, int padright, Pointer<java.lang.Integer > color);
	public native static int av_xiphlacing(Pointer<java.lang.Byte > s, int v);
	public native static int av_parse_video_frame_size(Pointer<java.lang.Integer > width_ptr, Pointer<java.lang.Integer > height_ptr, Pointer<java.lang.Byte > str);
	public native static int av_parse_video_frame_rate(Pointer<AVRational > frame_rate, Pointer<java.lang.Byte > str);
	public native static void av_log_missing_feature(Pointer<? > avc, Pointer<java.lang.Byte > feature, int want_sample);
	public native static void av_log_ask_for_sample(Pointer<? > avc, Pointer<java.lang.Byte > msg);
	public native static void av_register_hwaccel(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVHWAccel > hwaccel);
	public native static Pointer<com.nativelibs4java.ffmpeg.avcodec.AVHWAccel > av_hwaccel_next(Pointer<com.nativelibs4java.ffmpeg.avcodec.AVHWAccel > hwaccel);
	public native static int av_lockmgr_register(Pointer<AvcodecLibrary.cb > arg1);
	/// Pointer to unknown (opaque) type
	public static class AVResampleContext extends org.bridj.TypedPointer {
		public AVResampleContext(long address) {
			super(address);
		}
		public AVResampleContext(Pointer address) {
			super(address);
		}
		public static AvcodecLibrary.AVResampleContext av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff) {
			long $ = AvcodecLibrary.av_resample_init$direct(out_rate, in_rate, filter_length, log2_phase_count, linear, cutoff);
			return $ == 0 ? null : new AvcodecLibrary.AVResampleContext($);
		}
		public int av_resample(Pointer<java.lang.Short > dst, Pointer<java.lang.Short > src, Pointer<java.lang.Integer > consumed, int src_size, int dst_size, int update_ctx) {
			return AvcodecLibrary.av_resample(this.getPeer(), dst, src, consumed, src_size, dst_size, update_ctx);
		}
		public void av_resample_compensate(int sample_delta, int compensation_distance) {
			AvcodecLibrary.av_resample_compensate(this.getPeer(), sample_delta, compensation_distance);
		}
		public void av_resample_close() {
			AvcodecLibrary.av_resample_close(this.getPeer());
		}
	};
	private native static int av_resample(@Ptr long c, Pointer<java.lang.Short > dst, Pointer<java.lang.Short > src, Pointer<java.lang.Integer > consumed, int src_size, int dst_size, int update_ctx);
	private native static void av_resample_compensate(@Ptr long c, int sample_delta, int compensation_distance);
	private native static void av_resample_close(@Ptr long c);
	/// Pointer to unknown (opaque) type
	public static class ReSampleContext extends org.bridj.TypedPointer {
		public ReSampleContext(long address) {
			super(address);
		}
		public ReSampleContext(Pointer address) {
			super(address);
		}
		public static AvcodecLibrary.ReSampleContext audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate) {
			long $ = AvcodecLibrary.audio_resample_init$direct(output_channels, input_channels, output_rate, input_rate);
			return $ == 0 ? null : new AvcodecLibrary.ReSampleContext($);
		}
		public static AvcodecLibrary.ReSampleContext av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_out, ValuedEnum<AvcodecLibrary.SampleFormat > sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff) {
			long $ = AvcodecLibrary.av_audio_resample_init$direct(output_channels, input_channels, output_rate, input_rate, sample_fmt_out, sample_fmt_in, filter_length, log2_phase_count, linear, cutoff);
			return $ == 0 ? null : new AvcodecLibrary.ReSampleContext($);
		}
		public int audio_resample(Pointer<java.lang.Short > output, Pointer<java.lang.Short > input, int nb_samples) {
			return AvcodecLibrary.audio_resample(this.getPeer(), output, input, nb_samples);
		}
		public void audio_resample_close() {
			AvcodecLibrary.audio_resample_close(this.getPeer());
		}
	};
	private native static int audio_resample(@Ptr long s, Pointer<java.lang.Short > output, Pointer<java.lang.Short > input, int nb_samples);
	private native static void audio_resample_close(@Ptr long s);
}
