package com.nativelibs4java.ffmpeg.avfilter;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import static com.nativelibs4java.ffmpeg.avcodec.AvcodecLibrary.*;
import static com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.*;
import static com.nativelibs4java.ffmpeg.avutil.AvutilLibrary.*;
import static com.nativelibs4java.ffmpeg.swscale.SwscaleLibrary.*;
/**
 * A link between two filters. This contains pointers to the source and<br>
 * destination filters between which this link exists, and the indexes of<br>
 * the pads involved. In addition, this link also contains the parameters<br>
 * which have been negotiated and agreed upon between the filter, such as<br>
 * image dimensions, format, etc.<br>
 * <i>native declaration : libavfilter/avfilter.h:477</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter") 
public class AVFilterLink extends StructObject {
	public AVFilterLink() {
		super();
	}
	public AVFilterLink(Pointer pointer) {
		super(pointer);
	}
	/**
	 * < source filter<br>
	 * C type : AVFilterContext*
	 */
	@Field(0) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > src() {
		return this.io.getPointerField(this, 0);
	}
	/**
	 * < source filter<br>
	 * C type : AVFilterContext*
	 */
	@Field(0) 
	public AVFilterLink src(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > src) {
		this.io.setPointerField(this, 0, src);
		return this;
	}
	/// C type : AVFilterContext*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > src_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > src) {
		src(src);
		return src;
	}
	/// < index of the output pad on the source filter
	@Field(1) 
	public int srcpad() {
		return this.io.getIntField(this, 1);
	}
	/// < index of the output pad on the source filter
	@Field(1) 
	public AVFilterLink srcpad(int srcpad) {
		this.io.setIntField(this, 1, srcpad);
		return this;
	}
	public final int srcpad_$eq(int srcpad) {
		srcpad(srcpad);
		return srcpad;
	}
	/**
	 * < dest filter<br>
	 * C type : AVFilterContext*
	 */
	@Field(2) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > dst() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * < dest filter<br>
	 * C type : AVFilterContext*
	 */
	@Field(2) 
	public AVFilterLink dst(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > dst) {
		this.io.setPointerField(this, 2, dst);
		return this;
	}
	/// C type : AVFilterContext*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > dst_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterContext > dst) {
		dst(dst);
		return dst;
	}
	/// < index of the input pad on the dest filter
	@Field(3) 
	public int dstpad() {
		return this.io.getIntField(this, 3);
	}
	/// < index of the input pad on the dest filter
	@Field(3) 
	public AVFilterLink dstpad(int dstpad) {
		this.io.setIntField(this, 3, dstpad);
		return this;
	}
	public final int dstpad_$eq(int dstpad) {
		dstpad(dstpad);
		return dstpad;
	}
	/// Conversion Error : init_state_enum (Unsupported type)
	/// < agreed upon image width
	@Field(4) 
	public int w() {
		return this.io.getIntField(this, 4);
	}
	/// < agreed upon image width
	@Field(4) 
	public AVFilterLink w(int w) {
		this.io.setIntField(this, 4, w);
		return this;
	}
	public final int w_$eq(int w) {
		w(w);
		return w;
	}
	/// < agreed upon image height
	@Field(5) 
	public int h() {
		return this.io.getIntField(this, 5);
	}
	/// < agreed upon image height
	@Field(5) 
	public AVFilterLink h(int h) {
		this.io.setIntField(this, 5, h);
		return this;
	}
	public final int h_$eq(int h) {
		h(h);
		return h;
	}
	/**
	 * < agreed upon image colorspace<br>
	 * C type : PixelFormat
	 */
	@Field(6) 
	public ValuedEnum<PixelFormat > format() {
		return this.io.getEnumField(this, 6);
	}
	/**
	 * < agreed upon image colorspace<br>
	 * C type : PixelFormat
	 */
	@Field(6) 
	public AVFilterLink format(ValuedEnum<PixelFormat > format) {
		this.io.setEnumField(this, 6, format);
		return this;
	}
	/// C type : PixelFormat
	public final ValuedEnum<PixelFormat > format_$eq(ValuedEnum<PixelFormat > format) {
		format(format);
		return format;
	}
	/**
	 * Lists of formats supported by the input and output filters respectively.<br>
	 * These lists are used for negotiating the format to actually be used,<br>
	 * which will be loaded into the format member, above, when chosen.<br>
	 * C type : AVFilterFormats*
	 */
	@Field(7) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > in_formats() {
		return this.io.getPointerField(this, 7);
	}
	/**
	 * Lists of formats supported by the input and output filters respectively.<br>
	 * These lists are used for negotiating the format to actually be used,<br>
	 * which will be loaded into the format member, above, when chosen.<br>
	 * C type : AVFilterFormats*
	 */
	@Field(7) 
	public AVFilterLink in_formats(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > in_formats) {
		this.io.setPointerField(this, 7, in_formats);
		return this;
	}
	/// C type : AVFilterFormats*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > in_formats_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > in_formats) {
		in_formats(in_formats);
		return in_formats;
	}
	/// C type : AVFilterFormats*
	@Field(8) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > out_formats() {
		return this.io.getPointerField(this, 8);
	}
	/// C type : AVFilterFormats*
	@Field(8) 
	public AVFilterLink out_formats(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > out_formats) {
		this.io.setPointerField(this, 8, out_formats);
		return this;
	}
	/// C type : AVFilterFormats*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > out_formats_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterFormats > out_formats) {
		out_formats(out_formats);
		return out_formats;
	}
	/**
	 * The picture reference currently being sent across the link by the source<br>
	 * filter. This is used internally by the filter system to allow<br>
	 * automatic copying of pictures which do not have sufficient permissions<br>
	 * for the destination. This should not be accessed directly by the<br>
	 * filters.<br>
	 * C type : AVFilterPicRef*
	 */
	@Field(9) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > srcpic() {
		return this.io.getPointerField(this, 9);
	}
	/**
	 * The picture reference currently being sent across the link by the source<br>
	 * filter. This is used internally by the filter system to allow<br>
	 * automatic copying of pictures which do not have sufficient permissions<br>
	 * for the destination. This should not be accessed directly by the<br>
	 * filters.<br>
	 * C type : AVFilterPicRef*
	 */
	@Field(9) 
	public AVFilterLink srcpic(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > srcpic) {
		this.io.setPointerField(this, 9, srcpic);
		return this;
	}
	/// C type : AVFilterPicRef*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > srcpic_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > srcpic) {
		srcpic(srcpic);
		return srcpic;
	}
	/// C type : AVFilterPicRef*
	@Field(10) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > cur_pic() {
		return this.io.getPointerField(this, 10);
	}
	/// C type : AVFilterPicRef*
	@Field(10) 
	public AVFilterLink cur_pic(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > cur_pic) {
		this.io.setPointerField(this, 10, cur_pic);
		return this;
	}
	/// C type : AVFilterPicRef*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > cur_pic_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > cur_pic) {
		cur_pic(cur_pic);
		return cur_pic;
	}
	/// C type : AVFilterPicRef*
	@Field(11) 
	public Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > outpic() {
		return this.io.getPointerField(this, 11);
	}
	/// C type : AVFilterPicRef*
	@Field(11) 
	public AVFilterLink outpic(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > outpic) {
		this.io.setPointerField(this, 11, outpic);
		return this;
	}
	/// C type : AVFilterPicRef*
	public final Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > outpic_$eq(Pointer<com.nativelibs4java.ffmpeg.avfilter.AVFilterPicRef > outpic) {
		outpic(outpic);
		return outpic;
	}
	public enum init_state_enum implements IntValuedEnum<init_state_enum > {
		AVLINK_UNINIT(0),
		AVLINK_STARTINIT(1),
		AVLINK_INIT(2);
		init_state_enum(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<init_state_enum > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<init_state_enum > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
}
