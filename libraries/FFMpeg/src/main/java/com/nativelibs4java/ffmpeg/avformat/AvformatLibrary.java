package com.nativelibs4java.ffmpeg.avformat;
import com.nativelibs4java.ffmpeg.avcodec.AVCodecContext;
import com.nativelibs4java.ffmpeg.avcodec.AVPacket;
import com.nativelibs4java.ffmpeg.avcodec.AvcodecLibrary.AVMediaType;
import com.nativelibs4java.ffmpeg.avcodec.AvcodecLibrary.CodecID;
import com.nativelibs4java.ffmpeg.avutil.AVRational;
import com.nativelibs4java.ffmpeg.swscale.SwscaleLibrary.PixelFormat;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ValuedEnum;
import org.bridj.ann.Array;
import org.bridj.ann.Bits;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPRuntime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>avformat</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avformat") 
@Runtime(CPPRuntime.class) 
public class AvformatLibrary {
	static {
		BridJ.register();
	}
	public enum AVLangCodespace implements IntValuedEnum<AVLangCodespace > {
		AV_LANG_ISO639_2_BIBL(0),
		AV_LANG_ISO639_2_TERM(1),
		AV_LANG_ISO639_1(2);
		AVLangCodespace(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AVLangCodespace > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AVLangCodespace > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum MatroskaTrackType implements IntValuedEnum<MatroskaTrackType > {
		MATROSKA_TRACK_TYPE_NONE(0x0),
		MATROSKA_TRACK_TYPE_VIDEO(0x1),
		MATROSKA_TRACK_TYPE_AUDIO(0x2),
		MATROSKA_TRACK_TYPE_COMPLEX(0x3),
		MATROSKA_TRACK_TYPE_LOGO(0x10),
		MATROSKA_TRACK_TYPE_SUBTITLE(0x11),
		MATROSKA_TRACK_TYPE_CONTROL(0x20);
		MatroskaTrackType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<MatroskaTrackType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<MatroskaTrackType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum MatroskaTrackEncodingCompAlgo implements IntValuedEnum<MatroskaTrackEncodingCompAlgo > {
		MATROSKA_TRACK_ENCODING_COMP_ZLIB(0),
		MATROSKA_TRACK_ENCODING_COMP_BZLIB(1),
		MATROSKA_TRACK_ENCODING_COMP_LZO(2),
		MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP(3);
		MatroskaTrackEncodingCompAlgo(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<MatroskaTrackEncodingCompAlgo > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<MatroskaTrackEncodingCompAlgo > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum VocType implements IntValuedEnum<VocType > {
		VOC_TYPE_EOF(0x0),
		VOC_TYPE_VOICE_DATA(0x1),
		VOC_TYPE_VOICE_DATA_CONT(0x2),
		VOC_TYPE_SILENCE(0x3),
		VOC_TYPE_MARKER(0x4),
		VOC_TYPE_ASCII(0x5),
		VOC_TYPE_REPETITION_START(0x6),
		VOC_TYPE_REPETITION_END(0x7),
		VOC_TYPE_EXTENDED(0x8),
		VOC_TYPE_NEW_VOICE_DATA(0x9);
		VocType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<VocType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<VocType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum GXFPktType implements IntValuedEnum<GXFPktType > {
		PKT_MAP(0xBC),
		PKT_MEDIA(0xBF),
		PKT_EOS(0xFB),
		PKT_FLT(0xFC),
		PKT_UMF(0xFD);
		GXFPktType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GXFPktType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<GXFPktType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum GXFMatTag implements IntValuedEnum<GXFMatTag > {
		MAT_NAME(0x40),
		MAT_FIRST_FIELD(0x41),
		MAT_LAST_FIELD(0x42),
		MAT_MARK_IN(0x43),
		MAT_MARK_OUT(0x44),
		MAT_SIZE(0x45);
		GXFMatTag(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GXFMatTag > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<GXFMatTag > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum GXFTrackTag implements IntValuedEnum<GXFTrackTag > {
		TRACK_NAME(0x4C),
		TRACK_AUX(0x4D),
		TRACK_VER(0x4E),
		TRACK_MPG_AUX(0x4F),
		TRACK_FPS(0x50),
		TRACK_LINES(0x51),
		TRACK_FPF(0x52);
		GXFTrackTag(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<GXFTrackTag > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<GXFTrackTag > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public static final int FLV_HEADER_FLAG_HASVIDEO = (int)1;
	public static final int FLV_HEADER_FLAG_HASAUDIO = (int)4;
	public static final int FLV_TAG_TYPE_AUDIO = (int)8;
	public static final int FLV_TAG_TYPE_VIDEO = (int)9;
	public static final int FLV_TAG_TYPE_META = (int)18;
	public static final int FLV_MONO = (int)0;
	public static final int FLV_STEREO = (int)1;
	public static final int FLV_SAMPLESSIZE_8BIT = (int)0;
	public static final int FLV_SAMPLESSIZE_16BIT = (int)1 << 1;
	/// < signifies 5512Hz and 8000Hz in the case of NELLYMOSER
	public static final int FLV_SAMPLERATE_SPECIAL = (int)0;
	public static final int FLV_SAMPLERATE_11025HZ = (int)1 << 2;
	public static final int FLV_SAMPLERATE_22050HZ = (int)2 << 2;
	public static final int FLV_SAMPLERATE_44100HZ = (int)3 << 2;
	public static final int FLV_CODECID_PCM = (int)0;
	public static final int FLV_CODECID_ADPCM = (int)1 << 4;
	public static final int FLV_CODECID_MP3 = (int)2 << 4;
	public static final int FLV_CODECID_PCM_LE = (int)3 << 4;
	public static final int FLV_CODECID_NELLYMOSER_16KHZ_MONO = (int)4 << 4;
	public static final int FLV_CODECID_NELLYMOSER_8KHZ_MONO = (int)5 << 4;
	public static final int FLV_CODECID_NELLYMOSER = (int)6 << 4;
	public static final int FLV_CODECID_AAC = (int)10 << 4;
	public static final int FLV_CODECID_SPEEX = (int)11 << 4;
	public static final int FLV_CODECID_H263 = (int)2;
	public static final int FLV_CODECID_SCREEN = (int)3;
	public static final int FLV_CODECID_VP6 = (int)4;
	public static final int FLV_CODECID_VP6A = (int)5;
	public static final int FLV_CODECID_SCREEN2 = (int)6;
	public static final int FLV_CODECID_H264 = (int)7;
	public static final int FLV_FRAME_KEY = (int)1 << 4;
	public static final int FLV_FRAME_INTER = (int)2 << 4;
	public static final int FLV_FRAME_DISP_INTER = (int)3 << 4;
	public enum AMFDataType implements IntValuedEnum<AMFDataType > {
		AMF_DATA_TYPE_NUMBER(0x0),
		AMF_DATA_TYPE_BOOL(0x1),
		AMF_DATA_TYPE_STRING(0x2),
		AMF_DATA_TYPE_OBJECT(0x3),
		AMF_DATA_TYPE_NULL(0x5),
		AMF_DATA_TYPE_UNDEFINED(0x6),
		AMF_DATA_TYPE_REFERENCE(0x7),
		AMF_DATA_TYPE_MIXEDARRAY(0x8),
		AMF_DATA_TYPE_OBJECT_END(0x9),
		AMF_DATA_TYPE_ARRAY(0xA),
		AMF_DATA_TYPE_DATE(0xB),
		AMF_DATA_TYPE_LONG_STRING(0xC),
		AMF_DATA_TYPE_UNSUPPORTED(0xD);
		AMFDataType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<AMFDataType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<AMFDataType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTCPType implements IntValuedEnum<RTCPType > {
		RTCP_SR(200),
		RTCP_RR(201),
		RTCP_SDES(202),
		RTCP_BYE(203),
		RTCP_APP(204);
		RTCPType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTCPType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTCPType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum IEC61937DataType implements IntValuedEnum<IEC61937DataType > {
		IEC61937_AC3(0x1),
		IEC61937_MPEG1_LAYER1(0x4),
		IEC61937_MPEG1_LAYER23(0x5),
		IEC61937_MPEG2_EXT(0x6),
		IEC61937_MPEG2_AAC(0x7),
		IEC61937_MPEG2_LAYER1_LSF(0x8),
		IEC61937_MPEG2_LAYER2_LSF(0x9),
		IEC61937_MPEG2_LAYER3_LSF(0xA),
		IEC61937_DTS1(0xB),
		IEC61937_DTS2(0xC),
		IEC61937_DTS3(0xD),
		IEC61937_ATRAC(0xE),
		IEC61937_ATRAC3(0xF),
		IEC61937_ATRACX(0x10),
		IEC61937_DTSHD(0x11),
		IEC61937_WMAPRO(0x12),
		IEC61937_MPEG2_AAC_LSF_2048(0x13),
		IEC61937_MPEG2_AAC_LSF_4096(0x13 | 0x20),
		IEC61937_EAC3(0x15),
		IEC61937_TRUEHD(0x16);
		IEC61937DataType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<IEC61937DataType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<IEC61937DataType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTMPChannel implements IntValuedEnum<RTMPChannel > {
		RTMP_NETWORK_CHANNEL(2),
		RTMP_SYSTEM_CHANNEL(3),
		RTMP_SOURCE_CHANNEL(4),
		RTMP_VIDEO_CHANNEL(8),
		RTMP_AUDIO_CHANNEL(9);
		RTMPChannel(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTMPChannel > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTMPChannel > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTMPPacketType implements IntValuedEnum<RTMPPacketType > {
		RTMP_PT_CHUNK_SIZE(1),
		RTMP_PT_BYTES_READ(3),
		RTMP_PT_PING(4),
		RTMP_PT_SERVER_BW(5),
		RTMP_PT_CLIENT_BW(6),
		RTMP_PT_AUDIO(8),
		RTMP_PT_VIDEO(9),
		RTMP_PT_FLEX_STREAM(15),
		RTMP_PT_FLEX_OBJECT(16),
		RTMP_PT_FLEX_MESSAGE(17),
		RTMP_PT_NOTIFY(18),
		RTMP_PT_SHARED_OBJ(19),
		RTMP_PT_INVOKE(20),
		RTMP_PT_METADATA(22);
		RTMPPacketType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTMPPacketType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTMPPacketType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTMPPacketSize implements IntValuedEnum<RTMPPacketSize > {
		RTMP_PS_TWELVEBYTES(0),
		RTMP_PS_EIGHTBYTES(1),
		RTMP_PS_FOURBYTES(2),
		RTMP_PS_ONEBYTE(3);
		RTMPPacketSize(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTMPPacketSize > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTMPPacketSize > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum Flag implements IntValuedEnum<Flag > {
		FLAG_KEY(1),
		FLAG_EOR(2),
		FLAG_CODED_PTS(8),
		FLAG_STREAM_ID(16),
		FLAG_SIZE_MSB(32),
		FLAG_CHECKSUM(64),
		FLAG_RESERVED(128),
		FLAG_HEADER_IDX(1024),
		FLAG_MATCH_TIME(2048),
		FLAG_CODED(4096),
		FLAG_INVALID(8192);
		Flag(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<Flag > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<Flag > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTSPLowerTransport implements IntValuedEnum<RTSPLowerTransport > {
		RTSP_LOWER_TRANSPORT_UDP(0),
		RTSP_LOWER_TRANSPORT_TCP(1),
		RTSP_LOWER_TRANSPORT_UDP_MULTICAST(2),
		RTSP_LOWER_TRANSPORT_NB(3);
		RTSPLowerTransport(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPLowerTransport > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPLowerTransport > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTSPTransport implements IntValuedEnum<RTSPTransport > {
		RTSP_TRANSPORT_RTP(0),
		RTSP_TRANSPORT_RDT(1),
		RTSP_TRANSPORT_NB(2);
		RTSPTransport(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPTransport > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPTransport > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTSPControlTransport implements IntValuedEnum<RTSPControlTransport > {
		RTSP_MODE_PLAIN(0),
		RTSP_MODE_TUNNEL(1);
		RTSPControlTransport(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPControlTransport > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPControlTransport > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTSPClientState implements IntValuedEnum<RTSPClientState > {
		RTSP_STATE_IDLE(0),
		RTSP_STATE_STREAMING(1),
		RTSP_STATE_PAUSED(2),
		RTSP_STATE_SEEKING(3);
		RTSPClientState(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPClientState > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPClientState > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum RTSPServerType implements IntValuedEnum<RTSPServerType > {
		RTSP_SERVER_RTP(0),
		RTSP_SERVER_REAL(1),
		RTSP_SERVER_WMS(2),
		RTSP_SERVER_NB(3);
		RTSPServerType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPServerType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPServerType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum MXFMetadataSetType implements IntValuedEnum<MXFMetadataSetType > {
		AnyType(0),
		MaterialPackage(1),
		SourcePackage(2),
		SourceClip(3),
		TimecodeComponent(4),
		Sequence(5),
		MultipleDescriptor(6),
		Descriptor(7),
		Track(8),
		CryptoContext(9),
		Preface(10),
		Identification(11),
		ContentStorage(12),
		SubDescriptor(13),
		IndexTableSegment(14),
		EssenceContainerData(15),
		TypeBottom(16);
		MXFMetadataSetType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<MXFMetadataSetType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<MXFMetadataSetType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public static final int READ_HEADER = (int)0;
	public static final int READ_DATA = (int)1;
	public enum RTSPStatusCode implements IntValuedEnum<RTSPStatusCode > {
		RTSP_STATUS_OK(200),
		RTSP_STATUS_METHOD(405),
		RTSP_STATUS_BANDWIDTH(453),
		RTSP_STATUS_SESSION(454),
		RTSP_STATUS_STATE(455),
		RTSP_STATUS_AGGREGATE(459),
		RTSP_STATUS_ONLY_AGGREGATE(460),
		RTSP_STATUS_TRANSPORT(461),
		RTSP_STATUS_INTERNAL(500),
		RTSP_STATUS_SERVICE(503),
		RTSP_STATUS_VERSION(505);
		RTSPStatusCode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RTSPStatusCode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<RTSPStatusCode > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum HTTPAuthType implements IntValuedEnum<HTTPAuthType > {
		HTTP_AUTH_NONE(0),
		HTTP_AUTH_BASIC(1),
		HTTP_AUTH_DIGEST(2);
		HTTPAuthType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<HTTPAuthType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<HTTPAuthType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/rational.h</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/// <i>native declaration : libavformat/oggdec.h</i>
	public static final int OGG_FLAG_CONT = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOSTEREOMODE = (int)21433;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavformat/nut.h</i><br>
	 * + (((uint64_t)('N' << 8) + 'K') << 48)
	 */
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKTYPE = (int)131;
	/// <i>native declaration : libavformat/internal.h</i>
	public static final int MAX_URL_SIZE = (int)4096;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERFLAGHIDDEN = (int)152;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_GENERIC_INDEX = (int)256;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTP_MAX_SDES = (int)256;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVSEEK_FLAG_BACKWARD = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPLANG = (int)17276;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_VC1 = (int)234;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERDISPLAY = (int)128;
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final int ID3v2_HEADER_SIZE = (int)10;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_AUDIOOUTSAMPLINGFREQ = (int)30901;
	/// <i>native declaration : libavformat/nut.h</i>
	public static final int MAX_DISTANCE = (int)(1024 * 32 - 1);
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int DUMMY_FILE_SIZE = (int)(100 * 1024 * 1024);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_VARIABLE_FPS = (int)1024;
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_FLAG_KEY = (int)1;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_PRIVATE_SECTION = (int)5;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_DOCTYPE = (int)17026;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_EBMLVERSION = (int)17030;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERPHYSEQUIV = (int)25539;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_ISINTERLEAVED = (int)256;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final String LIBAVFORMAT_IDENT = (String)"Lavf";
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final int ID3v2_FLAG_ENCRYPTION = (int)4;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKFLAGENABLED = (int)185;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_VIDEO_FRAMETYPE_MASK = (int)240;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_DEFAULT_AUDIO_SAMPLERATE = (int)44100;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_MASK_PACKET_LENGTH_FIELD_SIZE = (int)96;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_RTP_HINT = (int)64;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_FILEDATA = (int)18012;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TIMECODESCALE = (int)2807729;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_INFINITEOUTPUTLOOP = (int)0;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKENTRY = (int)174;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PROGRAM_STREAM_MAP = (int)444;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_STREAMHEAD = (int)18;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NEEDNUMBER = (int)2;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_SEQUENCE_FIELD_IS_WORD = (int)4;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int SDT_TID = (int)66;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEEKENTRY = (int)19899;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_EDITIONUID = (int)17852;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int DUMMY_DURATION = (int)600;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKUID = (int)29637;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMTCTX_NOHEADER = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_MAX_DEPTH = (int)16;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKCONTENTENCODINGS = (int)28032;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGDEFAULT = (int)17540;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int PAT_PID = (int)0;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int SHAPE_ID = (int)1;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int RTP_MAX_PACKET_SIZE = (int)1450;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavformat/nut.h</i><br>
	 * + (((uint64_t)('N' << 8) + 'X') << 48)
	 */
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_WORD = (int)2;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_END = (int)0;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGSTRING = (int)17543;
	/// <i>native declaration : libavformat/spdif.h</i>
	public static final int SYNCWORD1 = (int)63602;
	/// <i>native declaration : libavformat/spdif.h</i>
	public static final int SYNCWORD2 = (int)19999;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_METADATA_DONT_STRDUP_KEY = (int)4;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_HANDSHAKE_PACKET_SIZE = (int)1536;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKNUMBER = (int)215;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int LIBAVFORMAT_VERSION_MINOR = (int)93;
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_MAX_PACKET_LENGTH = (int)1500;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_PLACEOBJECT2 = (int)26;
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_NOTS_VALUE = (int)(-1);
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_SAMPLESSIZE_OFFSET = (int)1;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_SAMPLERATE_MASK = (int)12;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_AUDIO_AAC = (int)15;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_CLIENT_VER1 = (int)9;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_CLIENT_VER2 = (int)0;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_CLIENT_VER3 = (int)124;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_CLIENT_VER4 = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_VOID = (int)236;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVPROBE_PADDING_SIZE = (int)32;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_DEFINESHAPE = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CLUSTERTIMECODE = (int)231;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_MASK_PAYLOAD_LENGTH_FIELD_SIZE = (int)192;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_DEFAULT = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_DURATION = (int)17545;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_DOCTYPEVERSION = (int)17031;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUES = (int)475249515;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_BYTE = (int)32;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUEBLOCKNUMBER = (int)21368;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_LONG = (int)256;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGSCOPE = (int)20530;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEODISPLAYWIDTH = (int)21680;
	/// <i>native declaration : libavformat/sox.h</i>
	public static final int SOX_FIXED_HDR = (int)(4 + 8 + 8 + 4 + 4);
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKLANGUAGE = (int)2274716;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_AUDIO_DTS = (int)138;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVI_MASTER_INDEX_SIZE = (int)256;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_EBMLREADVERSION = (int)17143;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_H264 = (int)27;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_COPYRIGHTED = (int)131072;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELHEIGHT = (int)186;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEEKHEAD = (int)290298740;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int LPCM_ID = (int)160;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKDEFAULTDURATION = (int)2352003;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE = (int)12;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_GLOBALHEADER = (int)64;
	/// <i>native declaration : libavformat/isom.h</i>
	public static final int MP4DecSpecificDescrTag = (int)5;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKFLAGDEFAULT = (int)136;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_BYTE = (int)16;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_TCP_MAX_PACKET_SIZE = (int)1472;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NOFILE = (int)1;
	/// <i>native declaration : libavformat/ffmeta.h</i>
	public static final String ID_STRING = (String)";FFMETADATA";
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_CHANNEL_MASK = (int)1;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PRIVATE_STREAM_2 = (int)447;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PRIVATE_STREAM_1 = (int)445;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_NONBLOCK = (int)4;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int FFM_PACKET_SIZE = (int)4096;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS_TYPE = (int)25546;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_FILEMIMETYPE = (int)18016;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERS = (int)272869232;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int AC3_ID = (int)128;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int MAX_STREAMS = (int)20;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_TRUSTCKTYPE = (int)2048;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CLUSTER = (int)524531317;
	/// <i>native declaration : libavformat/id3v1.h</i>
	public static final int ID3v1_GENRE_MAX = (int)147;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVSEEK_FLAG_BYTE = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECID = (int)134;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_VIDEOFRAME = (int)61;
	/// <i>native declaration : libavformat/internal.h</i>
	public static final int NTP_OFFSET = (int)-2085978496;
	/// <i>native declaration : libavformat/internal.h</i>
	public static final String SPACE_CHARS = (String)" \t\r\n";
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final String RTMP_CLIENT_PLATFORM = (String)"LNX";
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_NOFILLIN = (int)16;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOCOLORSPACE = (int)3061028;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_BYTE = (int)1;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_DWORD = (int)12;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_AUDIO_AC3 = (int)129;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavformat/nut.h</i><br>
	 * + (((uint64_t)('N' << 8) + 'M') << 48)
	 */
	/// <i>native declaration : libavformat/oggdec.h</i>
	public static final int OGG_FLAG_EOS = (int)4;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_STREAM_NUMBER_LENGTH_FIELD_IS_BYTE = (int)64;
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final int ID3v2_FLAG_DATALEN = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEGMENTUID = (int)29604;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_DEFAULT_PORT = (int)554;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_WORD = (int)16;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_MASK_SEQUENCE_FIELD_SIZE = (int)6;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_PARTIAL_SYNC_SAMPLE = (int)2;
	/// <i>native declaration : libavformat/id3v1.h</i>
	public static final int ID3v1_TAG_SIZE = (int)128;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int NB_PID_MAX = (int)8192;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEEKID = (int)21419;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTP_VERSION = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUETRACKPOSITION = (int)183;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS_TYPEVALUE = (int)26826;
	/// <i>native declaration : libavformat/ffm.h</i>
	public static final int FLAG_KEY_FRAME = (int)1;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_KEY_FRAME = (int)128;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_POINTENTRY = (int)187;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOFRAMERATE = (int)2327523;
	/// <i>native declaration : libavformat/rso.h</i>
	public static final int RSO_HEADER_SIZE = (int)8;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TITLE = (int)31657;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final long AVI_MAX_RIFF_SIZE = (long)1073741824L;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PACKET_START_CODE_MASK = (int)(-256);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_METADATA_DONT_STRDUP_VAL = (int)8;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_DWORD = (int)96;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_SHOW_IDS = (int)8;
	/// <i>native declaration : libavformat/ffm.h</i>
	public static final int FLAG_DTS = (int)2;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_SEQUENCE_FIELD_IS_DWORD = (int)6;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECDECODEALL = (int)170;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_KARAOKE = (int)32;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGTYPE = (int)20531;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS_CHAPTERUID = (int)25540;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int FLAG_MOVETO = (int)1;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int URL_RDONLY = (int)0;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_VERSION = (int)1;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_MASK_STREAM_NUMBER_LENGTH_FIELD_SIZE = (int)192;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIIF_INDEX = (int)16;
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_REORDER_QUEUE_DEFAULT_SIZE = (int)10;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PADDING_STREAM = (int)446;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_BLOCKREFERENCE = (int)251;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS_ATTACHUID = (int)25542;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKMINCACHE = (int)28135;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_SHOWFRAME = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGCOMPSETTINGS = (int)16981;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEEKPOSITION = (int)21420;
	/// <i>native declaration : libavformat/ffm.h</i>
	public static final int PACKET_ID = (int)26221;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_FORCED = (int)64;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int MAX_SECTION_SIZE = (int)4096;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_RAWPICTURE = (int)32;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ATTACHMENTS = (int)423732329;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKAUDIO = (int)225;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_METADATA_MATCH_CASE = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECDOWNLOADURL = (int)2536000;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_BYTE = (int)4;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_SEQUENCE_FIELD_IS_BYTE = (int)2;
	/// <i>native declaration : libavformat/isom.h</i>
	public static final int MP4ESDescrTag = (int)3;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_CODECID_OFFSET = (int)4;
	/// <i>native declaration : libavformat/ffm.h</i>
	public static final int FRAME_HEADER_SIZE = (int)16;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SEGMENT = (int)408125543;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_JPEG2 = (int)21;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_VIDEO_FRAMETYPE_OFFSET = (int)4;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_TRACK_STPS = (int)2;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVSEEK_FLAG_FRAME = (int)8;
	/// <i>native declaration : libavformat/spdif.h</i>
	public static final int BURST_HEADER_SIZE = (int)8;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_DUB = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEODISPLAYUNIT = (int)21682;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int TS_PACKET_SIZE = (int)188;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_FILEDESC = (int)18046;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int SYSTEM_HEADER_START_CODE = (int)(443);
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int SDT_PID = (int)17;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int LIBAVFORMAT_VERSION_MICRO = (int)0;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERUID = (int)29636;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGNAME = (int)17827;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int AUDIO_ID = (int)192;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NOSTREAMS = (int)4096;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVSEEK_FLAG_ANY = (int)4;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_LYRICS = (int)16;
	/// <i>native declaration : libavformat/isom.h</i>
	public static final int MP4IODescrTag = (int)2;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int SUB_ID = (int)32;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_DEFAULT_NB_AUDIO_CHANNELS = (int)1;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_VIDEOSTREAM = (int)60;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_WORD = (int)32;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_RTP_PORT_MAX = (int)10000;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTCP_TX_RATIO_NUM = (int)5;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPSTRING = (int)133;
	/// <i>native declaration : libavformat/ffmeta.h</i>
	public static final String ID_CHAPTER = (String)"[CHAPTER]";
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_FLAG_MARKER = (int)2;
	/// <i>native declaration : libavformat/ffm.h</i>
	public static final int FFM_HEADER_SIZE = (int)14;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int DTS_ID = (int)138;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_EDITIONFLAGORDERED = (int)17885;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_BYTE = (int)8;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_INDEX_CLUSTER_SIZE = (int)16384;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int MAX_PROBE_PACKETS = (int)2500;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_TRACK_CTTS = (int)1;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NOOUTPUTLOOP = (int)-1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ATTACHEDFILE = (int)24999;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SIMPLEBLOCK = (int)163;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_GENPTS = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUETRACK = (int)247;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_INFO = (int)357149030;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS_TRACKUID = (int)25541;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_STREAMBLOCK = (int)19;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_3G2 = (int)16;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_STREAMHEAD2 = (int)45;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_HEADER = (int)440786851;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_3GP = (int)4;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_FILENAME = (int)18030;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_AUDIOCHANNELS = (int)159;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_SAMPLERATE_OFFSET = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELCROPB = (int)21674;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELCROPT = (int)21691;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOFLAGINTERLACED = (int)154;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELCROPL = (int)21708;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELCROPR = (int)21725;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGCOMPRESSION = (int)20532;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_MP4 = (int)1;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_MUSTUSEINDEX = (int)32;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_MOV = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKNAME = (int)21358;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUECLUSTERPOSITION = (int)241;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_AUDIOSAMPLINGFREQ = (int)181;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_REMOVEOBJECT = (int)5;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_TS_DISCONT = (int)512;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_COMMENT = (int)8;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE = (int)3;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_NOPARSE = (int)32;
	/// <i>native declaration : libavformat/rtmppkt.h</i>
	public static final int RTMP_CHANNELS = (int)65599;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavformat/nut.h</i><br>
	 * + (((uint64_t)('N' << 8) + 'S') << 48)
	 */
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final String ID3v2_DEFAULT_MAGIC = (String)"ID3";
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final int ID3v2_FLAG_UNSYNCH = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKMAXCACHE = (int)28152;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERTIMEEND = (int)146;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CLUSTERPOSITION = (int)167;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_DIRAC = (int)209;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NOTIMESTAMPS = (int)128;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_CODECID_MASK = (int)240;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int PAT_TID = (int)0;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTCP_TX_RATIO_DEN = (int)1000;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAG = (int)29555;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_CRC32 = (int)191;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOPIXELWIDTH = (int)176;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_RTP_PORT_MIN = (int)5000;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGLANG = (int)17530;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKS = (int)374648427;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CUETIME = (int)179;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int ISO_11172_END_CODE = (int)(441);
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int AMF_END_OF_OBJECT = (int)9;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_BYTE = (int)64;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERTIMESTART = (int)145;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGS = (int)307544935;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKMAXBLKADDID = (int)21998;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int URL_WRONLY = (int)1;
	/// <i>native declaration : libavformat/network.h</i>
	public static final int NI_NAMERQD = (int)4;
	/// <i>native declaration : libavformat/isom.h</i>
	public static final int MP4DecConfigDescrTag = (int)4;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int TS_FEC_PACKET_SIZE = (int)204;
	/// <i>native declaration : libavformat/id3v2.h</i>
	public static final int ID3v2_FLAG_COMPRESSION = (int)8;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_PSP = (int)8;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PACKET_FLAG_ERROR_CORRECTION_PRESENT = (int)128;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int URL_EOF = (int)(-1);
	/// <i>native declaration : libavformat/oggdec.h</i>
	public static final int OGG_FLAG_BOS = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECPRIVATE = (int)25506;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int RAW_PACKET_BUFFER_SIZE = (int)2500000;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_EBMLMAXIDLENGTH = (int)17138;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_EDITIONFLAGHIDDEN = (int)17853;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_EDITIONENTRY = (int)17849;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_MASK_PADDING_LENGTH_FIELD_SIZE = (int)24;
	/// <i>native declaration : libavformat/adts.h</i>
	public static final int ADTS_HEADER_SIZE = (int)7;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_TIMESCALE = (int)1000;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_PRIVATE_DATA = (int)6;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int AVSEEK_SIZE = (int)65536;
	/// <i>native declaration : libavformat/rtsp.h</i>
	public static final int RTSP_MAX_TRANSPORTS = (int)8;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGCOMPALGO = (int)16980;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_METADATA_DONT_OVERWRITE = (int)16;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int MAX_STD_TIMEBASES = (int)(60 * 12 + 5);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_PROGRAM_RUNNING = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_WRITINGAPP = (int)22337;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTP_XIPH_IDENT = (int)16698810;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_MULTIPLE_PAYLOADS_PRESENT = (int)1;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE = (int)48;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_AUDIO_SAMPLESIZE_MASK = (int)2;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MODE_IPOD = (int)32;
	/// <i>native declaration : libavformat/rtp.h</i>
	public static final int RTP_PT_PRIVATE = (int)96;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_PLACEOBJECT = (int)4;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_IS_DWORD = (int)48;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_IGNIDX = (int)2;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int TS_MAX_PACKET_SIZE = (int)204;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECNAME = (int)2459272;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PACKET_START_CODE_PREFIX = (int)(256);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int LIBAVFORMAT_VERSION_MAJOR = (int)52;
	/// <i>native declaration : libavformat/flv.h</i>
	public static final int FLV_VIDEO_CODECID_MASK = (int)15;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int PACKET_SIZE = (int)3200;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PACKET_LENGTH_FIELD_IS_WORD = (int)64;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_BLOCKGROUP = (int)160;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERFLAGENABLED = (int)17816;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_EDITIONFLAGDEFAULT = (int)17883;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CLUSTERPREVSIZE = (int)171;
	/// <i>native declaration : libavformat/ffmeta.h</i>
	public static final String ID_STREAM = (String)"[STREAM]";
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int TS_DVHS_PACKET_SIZE = (int)192;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_FREECHARACTER = (int)3;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CODECINFOURL = (int)3883072;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_WASCAPTUREFILE = (int)65536;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_DOCTYPEREADVERSION = (int)17029;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_BLOCKDURATION = (int)155;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKFLAGFORCED = (int)21930;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int AUDIO_FIFO_SIZE = (int)65536;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_PAYLOAD_LENGTH_FIELD_IS_WORD = (int)128;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVINDEX_KEYFRAME = (int)1;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_METADATA_IGNORE_SUFFIX = (int)2;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int URL_RDWR = (int)2;
	/// <i>native declaration : libavformat/rtmp.h</i>
	public static final int RTMP_DEFAULT_PORT = (int)1935;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKVIDEO = (int)224;
	/// <i>native declaration : libavformat/rtpdec.h</i>
	public static final int RTP_MIN_PACKET_LENGTH = (int)12;
	/// <i>native declaration : libavformat/avio.h</i>
	public static final int AVSEEK_FORCE = (int)131072;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int TAG_FILEATTRIBUTES = (int)69;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int BITMAP_ID = (int)0;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_BLOCK = (int)161;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_AUDIOBITDEPTH = (int)25188;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGDEFAULT_BUG = (int)17588;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_SIMPLETAG = (int)26568;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int EBML_ID_EBMLMAXSIZELENGTH = (int)17139;
	/// <i>native declaration : libavformat/avi.h</i>
	public static final int AVIF_HASINDEX = (int)16;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKTIMECODESCALE = (int)2306383;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEOASPECTRATIO = (int)21683;
	/// <i>native declaration : libavformat/movenc.h</i>
	public static final int MOV_SYNC_SAMPLE = (int)1;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int PACK_START_CODE = (int)(442);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVPROBE_SCORE_MAX = (int)100;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int FF_FDEBUG_TS = (int)1;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_CHAPTERATOM = (int)182;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AV_DISPOSITION_ORIGINAL = (int)4;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_ENCODINGORDER = (int)20529;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int VIDEO_ID = (int)0;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_FLAG_IGNDTS = (int)8;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int PMT_TID = (int)2;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_VIDEODISPLAYHEIGHT = (int)21690;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKCONTENTENCODING = (int)25152;
	/// <i>native declaration : libavformat/mpeg.h</i>
	public static final int SEQUENCE_END_CODE = (int)(439);
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TAGTARGETS = (int)25536;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int AVFMT_NODIMENSIONS = (int)2048;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_MUXINGAPP = (int)19840;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final int MAX_REORDER_DELAY = (int)16;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_TRACKFLAGLACING = (int)156;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_DATEUTC = (int)17505;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PPI_FLAG_PADDING_LENGTH_FIELD_IS_DWORD = (int)24;
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_IS_DWORD = (int)3;
	/// <i>native declaration : libavformat/matroska.h</i>
	public static final int MATROSKA_ID_FILEUID = (int)18094;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavformat/nut.h</i><br>
	 * + (((uint64_t)('N' << 8) + 'I') << 48)
	 */
	/// <i>native declaration : libavformat/asf.h</i>
	public static final int ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_IS_WORD = (int)8;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int FLAG_SETFILL0 = (int)2;
	/// <i>native declaration : libavformat/swf.h</i>
	public static final int FLAG_SETFILL1 = (int)4;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_AUDIO_MPEG2 = (int)4;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_AUDIO_MPEG1 = (int)3;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_MPEG1 = (int)1;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_MPEG2 = (int)2;
	/// <i>native declaration : libavformat/mpegts.h</i>
	public static final int STREAM_TYPE_VIDEO_MPEG4 = (int)16;
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_ALLOC_FORMAT_CONTEXT = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_URL_SPLIT = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_FIRST_FORMAT = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_URL_RESETBUF = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_PARSE_FRAME_PARAM = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_OLD_METADATA = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/internal.h</i>
	public static final int NTP_OFFSET_US = (int)(AvformatLibrary.NTP_OFFSET * 1000000);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_PARAMETERS_CODEC_ID = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_GUESS_FORMAT = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_URL_CLASS = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR >= 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_SYMVER = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_REGISTER_PROTOCOL = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_UDP_GET_FILE = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_LAVF_UNUSED = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_MAX_STREAMS = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 53);
	/// <i>native declaration : libavformat/avformat.h</i>
	public static final boolean FF_API_READ_SEEK = (boolean)(AvformatLibrary.LIBAVFORMAT_VERSION_MAJOR < 54);
	/// <i>native declaration : libavformat/audiointerleave.h:52</i>
	public static abstract class ff_audio_rechunk_interleave_arg1_get_packet_callback extends Callback<ff_audio_rechunk_interleave_arg1_get_packet_callback > {
		public abstract int apply(Pointer<AvformatLibrary.AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > AVPacketPtr1, Pointer<AVPacket > AVPacketPtr2, int int1);
	};
	/// <i>native declaration : libavformat/audiointerleave.h:53</i>
	public static abstract class ff_audio_rechunk_interleave_arg2_compare_ts_callback extends Callback<ff_audio_rechunk_interleave_arg2_compare_ts_callback > {
		public abstract int apply(Pointer<AvformatLibrary.AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > AVPacketPtr1, Pointer<AVPacket > AVPacketPtr2);
	};
	/**
	 * Packet parsing for "private" payloads in the RTP specs.<br>
	 * * @param ctx RTSP demuxer context<br>
	 * @param s stream context<br>
	 * @param st stream that this packet belongs to<br>
	 * @param pkt packet in which to write the parsed data<br>
	 * @param timestamp pointer in which to write the timestamp of this RTP packet<br>
	 * @param buf pointer to raw RTP packet data<br>
	 * @param len length of buf<br>
	 * @param flags flags from the RTP packet header (RTP_FLAG_*)<br>
	 * <i>native declaration : libavformat/rtpdec.h</i>
	 */
	public static abstract class DynamicPayloadPacketHandlerProc extends Callback<DynamicPayloadPacketHandlerProc > {
		public abstract int apply(Pointer<AvformatLibrary.AVFormatContext > ctx, Pointer<AvformatLibrary.PayloadContext > s, Pointer<AvformatLibrary.AVStream > st, Pointer<AVPacket > pkt, Pointer<Integer > timestamp, Pointer<Byte > buf, int len, int flags);
	};
	/// <i>native declaration : libavformat/rtpdec.h:201</i>
	public static abstract class ff_parse_fmtp_arg1_parse_fmtp_callback extends Callback<ff_parse_fmtp_arg1_parse_fmtp_callback > {
		public abstract int apply(Pointer<AvformatLibrary.AVStream > stream, Pointer<AvformatLibrary.PayloadContext > data, Pointer<Byte > attr, Pointer<Byte > value);
	};
	/**
	 * Callback function type for ff_parse_key_value.<br>
	 * * @param key a pointer to the key<br>
	 * @param key_len the number of bytes that belong to the key, including the '='<br>
	 *                char<br>
	 * @param dest return the destination pointer for the value in *dest, may<br>
	 *             be null to ignore the value<br>
	 * @param dest_len the length of the *dest buffer<br>
	 * <i>native declaration : libavformat/internal.h</i>
	 */
	public static abstract class ff_parse_key_val_cb extends Callback<ff_parse_key_val_cb > {
		public abstract void apply(Pointer<? > context, Pointer<Byte > key, int key_len, Pointer<Pointer<Byte > > dest, Pointer<Integer > dest_len);
	};
	/// <i>native declaration : libavformat/internal.h:74</i>
	public static abstract class ff_interleave_add_packet_arg1_compare_callback extends Callback<ff_interleave_add_packet_arg1_compare_callback > {
		public abstract int apply(Pointer<AvformatLibrary.AVFormatContext > AVFormatContextPtr1, Pointer<AVPacket > AVPacketPtr1, Pointer<AVPacket > AVPacketPtr2);
	};
	/// <i>native declaration : libavformat/avio.h</i>
	public static abstract class URLInterruptCB extends Callback<URLInterruptCB > {
		public abstract int apply();
	};
	/// <i>native declaration : libavformat/avio.h:342</i>
	public static abstract class init_put_byte_arg1_read_packet_callback extends Callback<init_put_byte_arg1_read_packet_callback > {
		public abstract int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size);
	};
	/// <i>native declaration : libavformat/avio.h:343</i>
	public static abstract class init_put_byte_arg2_write_packet_callback extends Callback<init_put_byte_arg2_write_packet_callback > {
		public abstract int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size);
	};
	/// <i>native declaration : libavformat/avio.h:344</i>
	public static abstract class init_put_byte_arg3_seek_callback extends Callback<init_put_byte_arg3_seek_callback > {
		public abstract long apply(Pointer<? > opaque, long offset, int whence);
	};
	/// <i>native declaration : libavformat/avio.h:350</i>
	public static abstract class av_alloc_put_byte_arg1_read_packet_callback extends Callback<av_alloc_put_byte_arg1_read_packet_callback > {
		public abstract int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size);
	};
	/// <i>native declaration : libavformat/avio.h:351</i>
	public static abstract class av_alloc_put_byte_arg2_write_packet_callback extends Callback<av_alloc_put_byte_arg2_write_packet_callback > {
		public abstract int apply(Pointer<? > opaque, Pointer<Byte > buf, int buf_size);
	};
	/// <i>native declaration : libavformat/avio.h:352</i>
	public static abstract class av_alloc_put_byte_arg3_seek_callback extends Callback<av_alloc_put_byte_arg3_seek_callback > {
		public abstract long apply(Pointer<? > opaque, long offset, int whence);
	};
	/// <i>native declaration : libavformat/avio.h:565</i>
	public static abstract class init_checksum_arg1_update_checksum_callback extends Callback<init_checksum_arg1_update_checksum_callback > {
		@CLong 
		public abstract long apply(@CLong long c, Pointer<Byte > p, int len);
	};
	public static native long ff_gen_syncpoint_search(Pointer<AvformatLibrary.AVFormatContext > s, int stream_index, long pos, long min_ts, long ts, long max_ts, int flags);
	public static native Pointer<AVParserState > ff_store_parser_state(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native void ff_restore_parser_state(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVParserState > state);
	public static native void ff_free_parser_state(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVParserState > state);
	public static native int ff_socket_nonblock(int socket, int enable);
	public static native int ff_inet_aton(Pointer<Byte > str, Pointer<AvformatLibrary.in_addr > add);
	public static native Pointer<AvformatLibrary.DVDemuxContext > dv_init_demux(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int dv_get_packet(Pointer<AvformatLibrary.DVDemuxContext > DVDemuxContextPtr1, Pointer<AVPacket > AVPacketPtr1);
	public static native int dv_produce_packet(Pointer<AvformatLibrary.DVDemuxContext > DVDemuxContextPtr1, Pointer<AVPacket > AVPacketPtr1, Pointer<Byte > uint8_tPtr1, int int1);
	public static native void dv_offset_reset(Pointer<AvformatLibrary.DVDemuxContext > c, long frame_offset);
	public static native Pointer<AvformatLibrary.DVMuxContext > dv_init_mux(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int dv_assemble_frame(Pointer<AvformatLibrary.DVMuxContext > c, Pointer<AvformatLibrary.AVStream > AVStreamPtr1, Pointer<Byte > uint8_tPtr1, int int1, Pointer<Pointer<Byte > > uint8_tPtrPtr1);
	public static native void dv_delete_mux(Pointer<AvformatLibrary.DVMuxContext > DVMuxContextPtr1);
	public static native void ff_rtp_send_data(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buf1, int len, int m);
	public static native void ff_rtp_send_h264(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buf1, int size);
	public static native void ff_rtp_send_h263(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buf1, int size);
	public static native void ff_rtp_send_aac(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buff, int size);
	public static native void ff_rtp_send_amr(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buff, int size);
	public static native void ff_rtp_send_mpegvideo(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buf1, int size);
	public static native void ff_rtp_send_xiph(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buff, int size);
	public static native void ff_rtp_send_vp8(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<Byte > buff, int size);
	public static native void ff_ape_parse_tag(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native Pointer<Byte > av_convert_lang_to(Pointer<Byte > lang, AvformatLibrary.AVLangCodespace target_codespace);
	public static native int ff_raw_write_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt);
	public static native int ff_raw_read_header(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AvformatLibrary.AVFormatParameters > ap);
	public static native int ff_raw_read_partial_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt);
	public static native int ff_raw_audio_read_header(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AvformatLibrary.AVFormatParameters > ap);
	public static native int ff_raw_video_read_header(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AvformatLibrary.AVFormatParameters > ap);
	public static native Pointer<AvformatLibrary.TimeFilter > ff_timefilter_new(double clock_period, double feedback2_factor, double feedback3_factor);
	public static native double ff_timefilter_update(Pointer<AvformatLibrary.TimeFilter > self, double system_time, double period);
	public static native void ff_timefilter_reset(Pointer<AvformatLibrary.TimeFilter > TimeFilterPtr1);
	public static native void ff_timefilter_destroy(Pointer<AvformatLibrary.TimeFilter > TimeFilterPtr1);
	public static native int ff_adts_write_frame_header(Pointer<ADTSContext > ctx, Pointer<Byte > buf, int size, int pce_size);
	public static native int ff_adts_decode_extradata(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<ADTSContext > adts, Pointer<Byte > buf, int size);
	public static native int ff_avc_parse_nal_units(Pointer<ByteIOContext > s, Pointer<Byte > buf, int size);
	public static native int ff_avc_parse_nal_units_buf(Pointer<Byte > buf_in, Pointer<Pointer<Byte > > buf, Pointer<Integer > size);
	public static native int ff_isom_write_avcc(Pointer<ByteIOContext > pb, Pointer<Byte > data, int len);
	public static native Pointer<Byte > ff_avc_find_startcode(Pointer<Byte > p, Pointer<Byte > end);
	public static native int ff_audio_interleave_init(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Integer > samples_per_frame, AVRational time_base);
	public static native void ff_audio_interleave_close(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int ff_interleave_compare_dts(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > next, Pointer<AVPacket > pkt);
	public static native int ff_audio_rechunk_interleave(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > out, Pointer<AVPacket > pkt, int flush, Pointer<AvformatLibrary.ff_audio_rechunk_interleave_arg1_get_packet_callback > arg1, Pointer<AvformatLibrary.ff_audio_rechunk_interleave_arg2_compare_ts_callback > arg2);
	public static native int ff_mov_write_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt);
	public static native int ff_mov_init_hinting(Pointer<AvformatLibrary.AVFormatContext > s, int index, int src_index);
	public static native int ff_mov_add_hinted_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt, int track_index, int sample);
	public static native void ff_mov_close_hinting(Pointer<MOVTrack > track);
	public static native Pointer<RTPDemuxContext > rtp_parse_open(Pointer<AvformatLibrary.AVFormatContext > s1, Pointer<AvformatLibrary.AVStream > st, Pointer<URLContext > rtpc, int payload_type, int queue_size);
	public static native void rtp_parse_set_dynamic_protocol(Pointer<RTPDemuxContext > s, Pointer<AvformatLibrary.PayloadContext > ctx, Pointer<RTPDynamicProtocolHandler_s > handler);
	public static native int rtp_parse_packet(Pointer<RTPDemuxContext > s, Pointer<AVPacket > pkt, Pointer<Pointer<Byte > > buf, int len);
	public static native void rtp_parse_close(Pointer<RTPDemuxContext > s);
	public static native long ff_rtp_queued_packet_time(Pointer<RTPDemuxContext > s);
	public static native void ff_rtp_reset_packet_queue(Pointer<RTPDemuxContext > s);
	public static native int rtp_get_local_rtp_port(Pointer<URLContext > h);
	public static native int rtp_get_local_rtcp_port(Pointer<URLContext > h);
	public static native int rtp_set_remote_url(Pointer<URLContext > h, Pointer<Byte > uri);
	public static native void rtp_send_punch_packets(Pointer<URLContext > rtp_handle);
	public static native int rtp_check_and_send_back_rr(Pointer<RTPDemuxContext > s, int count);
	public static native int rtp_get_rtcp_file_handle(Pointer<URLContext > h);
	public static native void ff_register_dynamic_payload_handler(Pointer<RTPDynamicProtocolHandler_s > handler);
	public static native Pointer<RTPDynamicProtocolHandler_s > ff_rtp_handler_find_by_name(Pointer<Byte > name, AVMediaType codec_type);
	public static native Pointer<RTPDynamicProtocolHandler_s > ff_rtp_handler_find_by_id(int id, AVMediaType codec_type);
	public static native int ff_rtsp_next_attr_and_value(Pointer<Pointer<Byte > > p, Pointer<Byte > attr, int attr_size, Pointer<Byte > value, int value_size);
	public static native int ff_parse_fmtp(Pointer<AvformatLibrary.AVStream > stream, Pointer<AvformatLibrary.PayloadContext > data, Pointer<Byte > p, Pointer<AvformatLibrary.ff_parse_fmtp_arg1_parse_fmtp_callback > arg1);
	public static native void av_register_rtp_dynamic_payload_handlers();
	public static native Pointer<AvformatLibrary.RMStream > ff_rm_alloc_rmstream();
	public static native void ff_rm_free_rmstream(Pointer<AvformatLibrary.RMStream > rms);
	public static native int ff_rm_read_mdpr_codecdata(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<ByteIOContext > pb, Pointer<AvformatLibrary.AVStream > st, Pointer<AvformatLibrary.RMStream > rst, int codec_data_size);
	public static native int ff_rm_parse_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<ByteIOContext > pb, Pointer<AvformatLibrary.AVStream > st, Pointer<AvformatLibrary.RMStream > rst, int len, Pointer<AVPacket > pkt, Pointer<Integer > seq, int flags, long ts);
	public static native int ff_rm_retrieve_cache(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<ByteIOContext > pb, Pointer<AvformatLibrary.AVStream > st, Pointer<AvformatLibrary.RMStream > rst, Pointer<AVPacket > pkt);
	public static native void ff_rm_reorder_sipr_data(Pointer<Byte > buf, int sub_packet_h, int framesize);
	public static native int voc_get_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt, Pointer<AvformatLibrary.AVStream > st, int max_size);
	public static native void ff_http_set_headers(Pointer<URLContext > h, Pointer<Byte > headers);
	public static native void ff_http_set_chunked_transfer_encoding(Pointer<URLContext > h, int is_chunked);
	public static native void ff_http_init_auth_state(Pointer<URLContext > dest, Pointer<URLContext > src);
	public static native int ff_vorbiscomment_length(Pointer<AVMetadata > m, Pointer<Byte > vendor_string, Pointer<Integer > count);
	public static native int ff_vorbiscomment_write(Pointer<Pointer<Byte > > p, Pointer<Pointer<AVMetadata > > m, Pointer<Byte > vendor_string, int count);
	public static native int ff_rtp_get_payload_type(Pointer<AVCodecContext > codec);
	public static native int ff_rtp_get_codec_info(Pointer<AVCodecContext > codec, int payload_type);
	public static native Pointer<Byte > ff_rtp_enc_name(int payload_type);
	public static native CodecID ff_rtp_codec_id(Pointer<Byte > buf, AVMediaType codec_type);
	public static native Pointer<AvformatLibrary.MpegTSContext > ff_mpegts_parse_open(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int ff_mpegts_parse_packet(Pointer<AvformatLibrary.MpegTSContext > ts, Pointer<AVPacket > pkt, Pointer<Byte > buf, int len);
	public static native void ff_mpegts_parse_close(Pointer<AvformatLibrary.MpegTSContext > ts);
	public static native int ff_parse_mpeg2_descriptor(Pointer<AvformatLibrary.AVFormatContext > fc, Pointer<AvformatLibrary.AVStream > st, int stream_type, Pointer<Pointer<Byte > > pp, Pointer<Byte > desc_list_end, int mp4_dec_config_descr_len, int mp4_es_id, int pid, Pointer<Byte > mp4_dec_config_descr);
	public static native int ff_rtmp_packet_create(Pointer<RTMPPacket > pkt, int channel_id, ValuedEnum<AvformatLibrary.RTMPPacketType > type, int timestamp, int size);
	public static native void ff_rtmp_packet_destroy(Pointer<RTMPPacket > pkt);
	public static native int ff_rtmp_packet_read(Pointer<URLContext > h, Pointer<RTMPPacket > p, int chunk_size, Pointer<RTMPPacket > prev_pkt);
	public static native int ff_rtmp_packet_write(Pointer<URLContext > h, Pointer<RTMPPacket > p, int chunk_size, Pointer<RTMPPacket > prev_pkt);
	public static native void ff_rtmp_packet_dump(Pointer<? > ctx, Pointer<RTMPPacket > p);
	public static native int ff_amf_tag_size(Pointer<Byte > data, Pointer<Byte > data_end);
	public static native int ff_amf_get_field_value(Pointer<Byte > data, Pointer<Byte > data_end, Pointer<Byte > name, Pointer<Byte > dst, int dst_size);
	public static native void ff_amf_write_bool(Pointer<Pointer<Byte > > dst, int val);
	public static native void ff_amf_write_number(Pointer<Pointer<Byte > > dst, double num);
	public static native void ff_amf_write_string(Pointer<Pointer<Byte > > dst, Pointer<Byte > str);
	public static native void ff_amf_write_null(Pointer<Pointer<Byte > > dst);
	public static native void ff_amf_write_object_start(Pointer<Pointer<Byte > > dst);
	public static native void ff_amf_write_field_name(Pointer<Pointer<Byte > > dst, Pointer<Byte > str);
	public static native void ff_amf_write_object_end(Pointer<Pointer<Byte > > dst);
	public static native void ff_nut_reset_ts(Pointer<NUTContext > nut, AVRational time_base, long val);
	public static native long ff_lsb2full(Pointer<StreamContext > stream, long lsb);
	public static native int ff_nut_sp_pos_cmp(Pointer<Syncpoint > a, Pointer<Syncpoint > b);
	public static native int ff_nut_sp_pts_cmp(Pointer<Syncpoint > a, Pointer<Syncpoint > b);
	public static native void ff_nut_add_sp(Pointer<NUTContext > nut, long pos, long back_ptr, long ts);
	public static native void ff_nut_free_sp(Pointer<NUTContext > nut);
	public static native int pcm_read_seek(Pointer<AvformatLibrary.AVFormatContext > s, int stream_index, long timestamp, int flags);
	public static native int ff_id3v2_match(Pointer<Byte > buf, Pointer<Byte > magic);
	public static native int ff_id3v2_tag_len(Pointer<Byte > buf);
	public static native void ff_id3v2_parse(Pointer<AvformatLibrary.AVFormatContext > s, int len, byte version, byte flags);
	public static native void ff_id3v2_read(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > magic);
	public static native void ff_asfcrypt_dec(Pointer<Byte > key, Pointer<Byte > data, int len);
	public static native void ff_dynarray_add(Pointer<Pointer<CLong > > tab_ptr, Pointer<Integer > nb_ptr, @CLong long elem);
	@CLong 
	public static native long mktimegm(Pointer<AvformatLibrary.tm > tm);
	public static native Pointer<AvformatLibrary.tm > brktimegm(@CLong long secs, Pointer<AvformatLibrary.tm > tm);
	public static native Pointer<Byte > small_strptime(Pointer<Byte > p, Pointer<Byte > fmt, Pointer<AvformatLibrary.tm > dt);
	public static native Pointer<Byte > ff_data_to_hex(Pointer<Byte > buf, Pointer<Byte > src, int size, int lowercase);
	public static native int ff_hex_to_data(Pointer<Byte > data, Pointer<Byte > p);
	public static native void ff_program_add_stream_index(Pointer<AvformatLibrary.AVFormatContext > ac, int progid, int idx);
	public static native void ff_interleave_add_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt, Pointer<AvformatLibrary.ff_interleave_add_packet_arg1_compare_callback > arg1);
	public static native void ff_read_frame_flush(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native long ff_ntp_time();
	public static native int ff_probe_input_buffer(Pointer<Pointer<ByteIOContext > > pb, Pointer<Pointer<AvformatLibrary.AVInputFormat > > fmt, Pointer<Byte > filename, Pointer<? > logctx, int offset, int max_probe_size);
	public static native int ff_url_join(Pointer<Byte > str, int size, Pointer<Byte > proto, Pointer<Byte > authorization, Pointer<Byte > hostname, int port, Pointer<Byte > fmt, void arg1);
	public static native void ff_sdp_write_media(Pointer<Byte > buff, int size, Pointer<AVCodecContext > c, Pointer<Byte > dest_addr, Pointer<Byte > dest_type, int port, int ttl);
	public static native int ff_write_chained(Pointer<AvformatLibrary.AVFormatContext > dst, int dst_stream, Pointer<AVPacket > pkt, Pointer<AvformatLibrary.AVFormatContext > src);
	public static native int ff_get_v_length(long val);
	public static native void ff_put_v(Pointer<ByteIOContext > bc, long val);
	public static native int ff_get_line(Pointer<ByteIOContext > s, Pointer<Byte > buf, int maxlen);
	public static native void ff_parse_key_value(Pointer<Byte > str, Pointer<AvformatLibrary.ff_parse_key_val_cb > callback_get_buf, Pointer<? > context);
	public static native int ff_find_stream_index(Pointer<AvformatLibrary.AVFormatContext > s, int id);
	public static native void ff_rtsp_parse_line(Pointer<RTSPMessageHeader > reply, Pointer<Byte > buf, Pointer<RTSPState > rt, Pointer<Byte > method);
	public static native int ff_rtsp_send_cmd_with_content_async(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > method, Pointer<Byte > url, Pointer<Byte > headers, Pointer<Byte > send_content, int send_content_length);
	public static native int ff_rtsp_send_cmd_async(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > method, Pointer<Byte > url, Pointer<Byte > headers);
	public static native int ff_rtsp_send_cmd_with_content(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > method, Pointer<Byte > url, Pointer<Byte > headers, Pointer<RTSPMessageHeader > reply, Pointer<Pointer<Byte > > content_ptr, Pointer<Byte > send_content, int send_content_length);
	public static native int ff_rtsp_send_cmd(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > method, Pointer<Byte > url, Pointer<Byte > headers, Pointer<RTSPMessageHeader > reply, Pointer<Pointer<Byte > > content_ptr);
	public static native int ff_rtsp_read_reply(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<RTSPMessageHeader > reply, Pointer<Pointer<Byte > > content_ptr, int return_on_interleaved_data, Pointer<Byte > method);
	public static native void ff_rtsp_skip_packet(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int ff_rtsp_connect(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native void ff_rtsp_close_streams(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native void ff_rtsp_close_connections(Pointer<AvformatLibrary.AVFormatContext > rt);
	public static native int ff_rtsp_setup_input_streams(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<RTSPMessageHeader > reply);
	public static native int ff_rtsp_setup_output_streams(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > addr);
	public static native int ff_sdp_parse(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > content);
	public static native int ff_rtsp_tcp_read_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Pointer<RTSPStream > > prtsp_st, Pointer<Byte > buf, int buf_size);
	public static native int ff_rtsp_fetch_packet(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AVPacket > pkt);
	public static native int ff_put_str16_nolen(Pointer<ByteIOContext > s, Pointer<Byte > tag);
	public static native int ff_guidcmp(Pointer<? > g1, Pointer<? > g2);
	public static native void ff_get_guid(Pointer<ByteIOContext > s, Pointer<Pointer<Byte > > g);
	public static native long ff_start_tag(Pointer<ByteIOContext > pb, Pointer<Byte > tag);
	public static native void ff_end_tag(Pointer<ByteIOContext > pb, long start);
	public static native int ff_get_bmp_header(Pointer<ByteIOContext > pb, Pointer<AvformatLibrary.AVStream > st);
	public static native void ff_put_bmp_header(Pointer<ByteIOContext > pb, Pointer<AVCodecContext > enc, Pointer<AVCodecTag > tags, int for_asf);
	public static native int ff_put_wav_header(Pointer<ByteIOContext > pb, Pointer<AVCodecContext > enc);
	public static native CodecID ff_wav_codec_get_id(int tag, int bps);
	public static native void ff_get_wav_header(Pointer<ByteIOContext > pb, Pointer<AVCodecContext > codec, int size);
	public static native int ff_codec_get_tag(Pointer<AVCodecTag > tags, CodecID id);
	public static native CodecID ff_codec_get_id(Pointer<AVCodecTag > tags, int tag);
	public static native void ff_parse_specific_params(Pointer<AVCodecContext > stream, Pointer<Integer > au_rate, Pointer<Integer > au_ssize, Pointer<Integer > au_scale);
	public static native void ff_id3v1_read(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native int ff_mxf_decode_pixel_layout(Pointer<Byte > pixel_layout, Pointer<PixelFormat > pix_fmt);
	public static native Pointer<AvformatLibrary.RDTDemuxContext > ff_rdt_parse_open(Pointer<AvformatLibrary.AVFormatContext > ic, int first_stream_of_set_idx, Pointer<? > priv_data, Pointer<RTPDynamicProtocolHandler_s > handler);
	public static native void ff_rdt_parse_close(Pointer<AvformatLibrary.RDTDemuxContext > s);
	public static native void ff_rdt_calc_response_and_checksum(Pointer<Byte > response, Pointer<Byte > chksum, Pointer<Byte > challenge);
	public static native void av_register_rdt_dynamic_payload_handlers();
	public static native void ff_rdt_subscribe_rule(Pointer<Byte > cmd, int size, int stream_nr, int rule_nr);
	public static native int ff_rdt_parse_header(Pointer<Byte > buf, int len, Pointer<Integer > set_id, Pointer<Integer > seq_no, Pointer<Integer > stream_id, Pointer<Integer > is_keyframe, Pointer<Integer > timestamp);
	public static native int ff_rdt_parse_packet(Pointer<AvformatLibrary.RDTDemuxContext > s, Pointer<AVPacket > pkt, Pointer<Pointer<Byte > > buf, int len);
	public static native void ff_real_parse_sdp_a_line(Pointer<AvformatLibrary.AVFormatContext > s, int stream_index, Pointer<Byte > buf);
	public static native Pointer<AvformatLibrary.AVFormatContext > ff_rtp_chain_mux_open(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<AvformatLibrary.AVStream > st, Pointer<URLContext > handle, int packet_size);
	public static native void avformat_version();
	public static native Pointer<Byte > avformat_configuration();
	public static native Pointer<Byte > avformat_license();
	public static native Pointer<AVMetadataTag > av_metadata_get(Pointer<AVMetadata > m, Pointer<Byte > key, Pointer<AVMetadataTag > prev, int flags);
	public static native int av_metadata_set(Pointer<Pointer<AVMetadata > > pm, Pointer<Byte > key, Pointer<Byte > value);
	public static native int av_metadata_set2(Pointer<Pointer<AVMetadata > > pm, Pointer<Byte > key, Pointer<Byte > value, int flags);
	public static native void av_metadata_conv(Pointer<AvformatLibrary.AVFormatContext > ctx, Pointer<AVMetadataConv > d_conv, Pointer<AVMetadataConv > s_conv);
	public static native void av_metadata_copy(Pointer<Pointer<AVMetadata > > dst, Pointer<AVMetadata > src, int flags);
	public static native void av_metadata_free(Pointer<Pointer<AVMetadata > > m);
	public static native int av_get_packet(Pointer<ByteIOContext > s, Pointer<AVPacket > pkt, int size);
	public static native int av_append_packet(Pointer<ByteIOContext > s, Pointer<AVPacket > pkt, int size);
	public static native void ff_metadata_demux_compat(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native void ff_metadata_mux_compat(Pointer<AvformatLibrary.AVFormatContext > s);
	public static native void ff_metadata_conv(Pointer<Pointer<AVMetadata > > pm, Pointer<AVMetadataConv > d_conv, Pointer<AVMetadataConv > s_conv);
	public static native void ff_metadata_conv_ctx(Pointer<AvformatLibrary.AVFormatContext > ctx, Pointer<AVMetadataConv > d_conv, Pointer<AVMetadataConv > s_conv);
	public static native int ff_wms_parse_sdp_a_line(Pointer<AvformatLibrary.AVFormatContext > s, Pointer<Byte > p);
	public static native int ff_sauce_read(Pointer<AvformatLibrary.AVFormatContext > avctx, Pointer<Long > fsize, Pointer<Integer > got_width, int get_height);
	public static native int ff_flac_write_header(Pointer<ByteIOContext > pb, Pointer<AVCodecContext > codec, int last_block);
	public static native int ff_mov_iso639_to_lang(Pointer<Byte > lang, int mp4);
	public static native int ff_mov_lang_to_iso639(int code, Pointer<Byte > to);
	public static native int ff_mp4_read_descr_len(Pointer<ByteIOContext > pb);
	public static native int ff_mp4_read_descr(Pointer<AvformatLibrary.AVFormatContext > fc, Pointer<ByteIOContext > pb, Pointer<Integer > tag);
	public static native int ff_mp4_read_dec_config_descr(Pointer<AvformatLibrary.AVFormatContext > fc, Pointer<AvformatLibrary.AVStream > st, Pointer<ByteIOContext > pb);
	public static native int ff_mov_read_esds(Pointer<AvformatLibrary.AVFormatContext > fc, Pointer<ByteIOContext > pb, MOVAtom atom);
	public static native CodecID ff_mov_get_lpcm_codec_id(int bps, int flags);
	public static native int ff_mov_read_stsd_entries(Pointer<MOVContext > c, Pointer<ByteIOContext > pb, int entries);
	public static native void ff_http_auth_handle_header(Pointer<HTTPAuthState > state, Pointer<Byte > key, Pointer<Byte > value);
	public static native Pointer<Byte > ff_http_auth_create_response(Pointer<HTTPAuthState > state, Pointer<Byte > auth, Pointer<Byte > path, Pointer<Byte > method);
	public static native int ff_mms_asf_header_parser(Pointer<MMSContext > mms);
	public static native int ff_mms_read_data(Pointer<MMSContext > mms, Pointer<Byte > buf, int size);
	public static native int ff_mms_read_header(Pointer<MMSContext > mms, Pointer<Byte > buf, int size);
	public static native int url_open_protocol(Pointer<Pointer<URLContext > > puc, Pointer<URLProtocol > up, Pointer<Byte > url, int flags);
	public static native int url_alloc(Pointer<Pointer<URLContext > > h, Pointer<Byte > url, int flags);
	public static native int url_connect(Pointer<URLContext > h);
	public static native int url_open(Pointer<Pointer<URLContext > > h, Pointer<Byte > url, int flags);
	public static native int url_read(Pointer<URLContext > h, Pointer<Byte > buf, int size);
	public static native int url_read_complete(Pointer<URLContext > h, Pointer<Byte > buf, int size);
	public static native int url_write(Pointer<URLContext > h, Pointer<Byte > buf, int size);
	public static native long url_seek(Pointer<URLContext > h, long pos, int whence);
	public static native int url_close(Pointer<URLContext > h);
	public static native int url_exist(Pointer<Byte > url);
	public static native long url_filesize(Pointer<URLContext > h);
	public static native int url_get_file_handle(Pointer<URLContext > h);
	public static native int url_get_max_packet_size(Pointer<URLContext > h);
	public static native void url_get_filename(Pointer<URLContext > h, Pointer<Byte > buf, int buf_size);
	public static native void url_set_interrupt_cb(Pointer<Pointer<AvformatLibrary.URLInterruptCB > > interrupt_cb);
	public static native int url_poll(Pointer<URLPollEntry > poll_table, int n, int timeout);
	public static native int av_url_read_pause(Pointer<URLContext > h, int pause);
	public static native long av_url_read_seek(Pointer<URLContext > h, int stream_index, long timestamp, int flags);
	public static native Pointer<URLProtocol > av_protocol_next(Pointer<URLProtocol > p);
	public static native int register_protocol(Pointer<URLProtocol > protocol);
	public static native int av_register_protocol(Pointer<URLProtocol > protocol);
	public static native int av_register_protocol2(Pointer<URLProtocol > protocol, int size);
	public static native int init_put_byte(Pointer<ByteIOContext > s, Pointer<Byte > buffer, int buffer_size, int write_flag, Pointer<? > opaque, Pointer<AvformatLibrary.init_put_byte_arg1_read_packet_callback > arg1, Pointer<AvformatLibrary.init_put_byte_arg2_write_packet_callback > arg2, Pointer<AvformatLibrary.init_put_byte_arg3_seek_callback > arg3);
	public static native Pointer<ByteIOContext > av_alloc_put_byte(Pointer<Byte > buffer, int buffer_size, int write_flag, Pointer<? > opaque, Pointer<AvformatLibrary.av_alloc_put_byte_arg1_read_packet_callback > arg1, Pointer<AvformatLibrary.av_alloc_put_byte_arg2_write_packet_callback > arg2, Pointer<AvformatLibrary.av_alloc_put_byte_arg3_seek_callback > arg3);
	public static native void put_byte(Pointer<ByteIOContext > s, int b);
	public static native void put_nbyte(Pointer<ByteIOContext > s, int b, int count);
	public static native void put_buffer(Pointer<ByteIOContext > s, Pointer<Byte > buf, int size);
	public static native void put_le64(Pointer<ByteIOContext > s, long val);
	public static native void put_be64(Pointer<ByteIOContext > s, long val);
	public static native void put_le32(Pointer<ByteIOContext > s, int val);
	public static native void put_be32(Pointer<ByteIOContext > s, int val);
	public static native void put_le24(Pointer<ByteIOContext > s, int val);
	public static native void put_be24(Pointer<ByteIOContext > s, int val);
	public static native void put_le16(Pointer<ByteIOContext > s, int val);
	public static native void put_be16(Pointer<ByteIOContext > s, int val);
	public static native void put_tag(Pointer<ByteIOContext > s, Pointer<Byte > tag);
	public static native void put_strz(Pointer<ByteIOContext > s, Pointer<Byte > buf);
	public static native long url_fseek(Pointer<ByteIOContext > s, long offset, int whence);
	public static native int url_fskip(Pointer<ByteIOContext > s, long offset);
	public static native long url_ftell(Pointer<ByteIOContext > s);
	public static native long url_fsize(Pointer<ByteIOContext > s);
	public static native int url_feof(Pointer<ByteIOContext > s);
	public static native int url_ferror(Pointer<ByteIOContext > s);
	public static native int av_url_read_fpause(Pointer<ByteIOContext > h, int pause);
	public static native long av_url_read_fseek(Pointer<ByteIOContext > h, int stream_index, long timestamp, int flags);
	public static native int url_fgetc(Pointer<ByteIOContext > s);
	public static native int url_fprintf(Pointer<ByteIOContext > s, Pointer<Byte > fmt, void arg1);
	public static native Pointer<Byte > url_fgets(Pointer<ByteIOContext > s, Pointer<Byte > buf, int buf_size);
	public static native void put_flush_packet(Pointer<ByteIOContext > s);
	public static native int get_buffer(Pointer<ByteIOContext > s, Pointer<Byte > buf, int size);
	public static native int get_partial_buffer(Pointer<ByteIOContext > s, Pointer<Byte > buf, int size);
	public static native int get_byte(Pointer<ByteIOContext > s);
	public static native int get_le24(Pointer<ByteIOContext > s);
	public static native int get_le32(Pointer<ByteIOContext > s);
	public static native long get_le64(Pointer<ByteIOContext > s);
	public static native int get_le16(Pointer<ByteIOContext > s);
	public static native Pointer<Byte > get_strz(Pointer<ByteIOContext > s, Pointer<Byte > buf, int maxlen);
	public static native int get_be16(Pointer<ByteIOContext > s);
	public static native int get_be24(Pointer<ByteIOContext > s);
	public static native int get_be32(Pointer<ByteIOContext > s);
	public static native long get_be64(Pointer<ByteIOContext > s);
	public static native long ff_get_v(Pointer<ByteIOContext > bc);
	public static native int url_fdopen(Pointer<Pointer<ByteIOContext > > s, Pointer<URLContext > h);
	public static native int url_setbufsize(Pointer<ByteIOContext > s, int buf_size);
	public static native int url_resetbuf(Pointer<ByteIOContext > s, int flags);
	public static native int ff_rewind_with_probe_data(Pointer<ByteIOContext > s, Pointer<Byte > buf, int buf_size);
	public static native int url_fopen(Pointer<Pointer<ByteIOContext > > s, Pointer<Byte > url, int flags);
	public static native int url_fclose(Pointer<ByteIOContext > s);
	public static native Pointer<URLContext > url_fileno(Pointer<ByteIOContext > s);
	public static native int url_fget_max_packet_size(Pointer<ByteIOContext > s);
	public static native int url_open_buf(Pointer<Pointer<ByteIOContext > > s, Pointer<Byte > buf, int buf_size, int flags);
	public static native int url_close_buf(Pointer<ByteIOContext > s);
	public static native int url_open_dyn_buf(Pointer<Pointer<ByteIOContext > > s);
	public static native int url_open_dyn_packet_buf(Pointer<Pointer<ByteIOContext > > s, int max_packet_size);
	public static native int url_close_dyn_buf(Pointer<ByteIOContext > s, Pointer<Pointer<Byte > > pbuffer);
	public static native void ff_crc04C11DB7_update(@CLong long checksum, Pointer<Byte > buf, int len);
	public static native void get_checksum(Pointer<ByteIOContext > s);
	public static native void init_checksum(Pointer<ByteIOContext > s, Pointer<AvformatLibrary.init_checksum_arg1_update_checksum_callback > arg1, @CLong long checksum);
	public static native int udp_set_remote_url(Pointer<URLContext > h, Pointer<Byte > uri);
	public static native int udp_get_local_port(Pointer<URLContext > h);
	public static native int udp_get_file_handle(Pointer<URLContext > h);
	/// C type : extern const CodecTags[]
	public Pointer<CodecTags > ff_mkv_codec_tags() {
		try {
			return (Pointer<CodecTags >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.CodecTags.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const CodecTags[]
	public AvformatLibrary ff_mkv_codec_tags(Pointer<CodecTags > ff_mkv_codec_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.CodecTags.class)).set(ff_mkv_codec_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const CodecTags[]
	public final Pointer<CodecTags > ff_mkv_codec_tags_$eq(Pointer<CodecTags > ff_mkv_codec_tags) {
		ff_mkv_codec_tags(ff_mkv_codec_tags);
		return ff_mkv_codec_tags;
	}
	/// C type : extern const CodecMime[]
	public Pointer<CodecMime > ff_mkv_mime_tags() {
		try {
			return (Pointer<CodecMime >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_mime_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.CodecMime.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const CodecMime[]
	public AvformatLibrary ff_mkv_mime_tags(Pointer<CodecMime > ff_mkv_mime_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_mime_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.CodecMime.class)).set(ff_mkv_mime_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const CodecMime[]
	public final Pointer<CodecMime > ff_mkv_mime_tags_$eq(Pointer<CodecMime > ff_mkv_mime_tags) {
		ff_mkv_mime_tags(ff_mkv_mime_tags);
		return ff_mkv_mime_tags;
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_mkv_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_mkv_metadata_conv(Pointer<AVMetadataConv > ff_mkv_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mkv_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_mkv_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_mkv_metadata_conv_$eq(Pointer<AVMetadataConv > ff_mkv_metadata_conv) {
		ff_mkv_metadata_conv(ff_mkv_metadata_conv);
		return ff_mkv_metadata_conv;
	}
	/// C type : static const int[4]
	@Array({4}) 
	public Pointer<Integer > lpcm_freq_tab() {
		try {
			return (Pointer<Integer >)BridJ.getNativeLibrary("avformat").getSymbolPointer("lpcm_freq_tab").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Integer.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_codec_caf_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_caf_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_codec_caf_tags(Pointer<AVCodecTag > ff_codec_caf_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_caf_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_codec_caf_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_codec_caf_tags_$eq(Pointer<AVCodecTag > ff_codec_caf_tags) {
		ff_codec_caf_tags(ff_codec_caf_tags);
		return ff_codec_caf_tags;
	}
	/// C type : extern RTPDynamicProtocolHandler*
	public Pointer<RTPDynamicProtocolHandler_s > RTPFirstDynamicPayloadHandler() {
		try {
			return (Pointer<RTPDynamicProtocolHandler_s >)BridJ.getNativeLibrary("avformat").getSymbolPointer("RTPFirstDynamicPayloadHandler").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler*
	public AvformatLibrary RTPFirstDynamicPayloadHandler(Pointer<RTPDynamicProtocolHandler_s > RTPFirstDynamicPayloadHandler) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("RTPFirstDynamicPayloadHandler").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class)).set(RTPFirstDynamicPayloadHandler);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler*
	public final Pointer<RTPDynamicProtocolHandler_s > RTPFirstDynamicPayloadHandler_$eq(Pointer<RTPDynamicProtocolHandler_s > RTPFirstDynamicPayloadHandler) {
		RTPFirstDynamicPayloadHandler(RTPFirstDynamicPayloadHandler);
		return RTPFirstDynamicPayloadHandler;
	}
	/// C type : extern const char*[4]
	@Array({4}) 
	public Pointer<Pointer<Byte > > ff_rm_metadata() {
		try {
			return (Pointer<Pointer<Byte > >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_rm_metadata").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const unsigned char[4]
	@Array({4}) 
	public Pointer<Byte > ff_sipr_subpk_size() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_sipr_subpk_size").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_rm_codec_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_rm_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_rm_codec_tags(Pointer<AVCodecTag > ff_rm_codec_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_rm_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_rm_codec_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_rm_codec_tags_$eq(Pointer<AVCodecTag > ff_rm_codec_tags) {
		ff_rm_codec_tags(ff_rm_codec_tags);
		return ff_rm_codec_tags;
	}
	/// C type : extern const unsigned char[21]
	@Array({21}) 
	public Pointer<Byte > ff_voc_magic() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_voc_magic").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_voc_codec_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_voc_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_voc_codec_tags(Pointer<AVCodecTag > ff_voc_codec_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_voc_codec_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_voc_codec_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_voc_codec_tags_$eq(Pointer<AVCodecTag > ff_voc_codec_tags) {
		ff_voc_codec_tags(ff_voc_codec_tags);
		return ff_voc_codec_tags;
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_vorbiscomment_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_vorbiscomment_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_vorbiscomment_metadata_conv(Pointer<AVMetadataConv > ff_vorbiscomment_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_vorbiscomment_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_vorbiscomment_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_vorbiscomment_metadata_conv_$eq(Pointer<AVMetadataConv > ff_vorbiscomment_metadata_conv) {
		ff_vorbiscomment_metadata_conv(ff_vorbiscomment_metadata_conv);
		return ff_vorbiscomment_metadata_conv;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_nut_subtitle_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_subtitle_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_nut_subtitle_tags(Pointer<AVCodecTag > ff_nut_subtitle_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_subtitle_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_nut_subtitle_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_nut_subtitle_tags_$eq(Pointer<AVCodecTag > ff_nut_subtitle_tags) {
		ff_nut_subtitle_tags(ff_nut_subtitle_tags);
		return ff_nut_subtitle_tags;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_nut_video_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_video_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_nut_video_tags(Pointer<AVCodecTag > ff_nut_video_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_video_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_nut_video_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_nut_video_tags_$eq(Pointer<AVCodecTag > ff_nut_video_tags) {
		ff_nut_video_tags(ff_nut_video_tags);
		return ff_nut_video_tags;
	}
	/// C type : extern const Dispositions[]
	public Pointer<Dispositions > ff_nut_dispositions() {
		try {
			return (Pointer<Dispositions >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_dispositions").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.Dispositions.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const Dispositions[]
	public AvformatLibrary ff_nut_dispositions(Pointer<Dispositions > ff_nut_dispositions) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_dispositions").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.Dispositions.class)).set(ff_nut_dispositions);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const Dispositions[]
	public final Pointer<Dispositions > ff_nut_dispositions_$eq(Pointer<Dispositions > ff_nut_dispositions) {
		ff_nut_dispositions(ff_nut_dispositions);
		return ff_nut_dispositions;
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_nut_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_nut_metadata_conv(Pointer<AVMetadataConv > ff_nut_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_nut_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_nut_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_nut_metadata_conv_$eq(Pointer<AVMetadataConv > ff_nut_metadata_conv) {
		ff_nut_metadata_conv(ff_nut_metadata_conv);
		return ff_nut_metadata_conv;
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_id3v2_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_id3v2_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_id3v2_metadata_conv(Pointer<AVMetadataConv > ff_id3v2_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_id3v2_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_id3v2_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_id3v2_metadata_conv_$eq(Pointer<AVMetadataConv > ff_id3v2_metadata_conv) {
		ff_id3v2_metadata_conv(ff_id3v2_metadata_conv);
		return ff_id3v2_metadata_conv;
	}
	/**
	 * A list of ID3v2.4 text information frames.<br>
	 * http://www.id3.org/id3v2.4.0-frames<br>
	 * C type : extern const char[][4]
	 */
	@Array({4}) 
	public Pointer<Byte > ff_id3v2_tags() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_id3v2_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int rtsp_rtp_port_min() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("rtsp_rtp_port_min").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary rtsp_rtp_port_min(int rtsp_rtp_port_min) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("rtsp_rtp_port_min").as(int.class).set(rtsp_rtp_port_min);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int rtsp_rtp_port_min_$eq(int rtsp_rtp_port_min) {
		rtsp_rtp_port_min(rtsp_rtp_port_min);
		return rtsp_rtp_port_min;
	}
	public int rtsp_rtp_port_max() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("rtsp_rtp_port_max").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary rtsp_rtp_port_max(int rtsp_rtp_port_max) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("rtsp_rtp_port_max").as(int.class).set(rtsp_rtp_port_max);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int rtsp_rtp_port_max_$eq(int rtsp_rtp_port_max) {
		rtsp_rtp_port_max(rtsp_rtp_port_max);
		return rtsp_rtp_port_max;
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_file_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_file_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_stream_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_stream_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_ext_stream_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_ext_stream_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_audio_stream() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_audio_stream").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_audio_conceal_none() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_audio_conceal_none").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_audio_conceal_spread() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_audio_conceal_spread").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_video_stream() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_video_stream").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_jfif_media() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_jfif_media").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_video_conceal_none() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_video_conceal_none").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_command_stream() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_command_stream").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_comment_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_comment_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_codec_comment_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_codec_comment_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_codec_comment1_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_codec_comment1_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_data_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_data_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_head1_guid() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_head1_guid").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_head2_guid() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_head2_guid").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_extended_content_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_extended_content_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_simple_index_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_simple_index_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_ext_stream_embed_stream_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_ext_stream_embed_stream_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_ext_stream_audio_stream() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_ext_stream_audio_stream").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_metadata_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_metadata_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_marker_header() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_marker_header").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_my_guid() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_my_guid").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_language_guid() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_language_guid").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_content_encryption() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_content_encryption").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_ext_content_encryption() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_ext_content_encryption").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const ff_asf_guid
	@Array({16}) 
	public Pointer<Byte > ff_asf_digital_signature() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_digital_signature").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_asf_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_asf_metadata_conv(Pointer<AVMetadataConv > ff_asf_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_asf_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_asf_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_asf_metadata_conv_$eq(Pointer<AVMetadataConv > ff_asf_metadata_conv) {
		ff_asf_metadata_conv(ff_asf_metadata_conv);
		return ff_asf_metadata_conv;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_codec_bmp_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_bmp_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_codec_bmp_tags(Pointer<AVCodecTag > ff_codec_bmp_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_bmp_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_codec_bmp_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_codec_bmp_tags_$eq(Pointer<AVCodecTag > ff_codec_bmp_tags) {
		ff_codec_bmp_tags(ff_codec_bmp_tags);
		return ff_codec_bmp_tags;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_codec_wav_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_wav_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_codec_wav_tags(Pointer<AVCodecTag > ff_codec_wav_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_wav_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_codec_wav_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_codec_wav_tags_$eq(Pointer<AVCodecTag > ff_codec_wav_tags) {
		ff_codec_wav_tags(ff_codec_wav_tags);
		return ff_codec_wav_tags;
	}
	/**
	 * ID3v1 genres<br>
	 * C type : extern const char*[147 + 1]
	 */
	@Array({147 + 1}) 
	public Pointer<Pointer<Byte > > ff_id3v1_genre_str() {
		try {
			return (Pointer<Pointer<Byte > >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_id3v1_genre_str").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFCodecUL[]
	public Pointer<MXFCodecUL > ff_mxf_data_definition_uls() {
		try {
			return (Pointer<MXFCodecUL >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_data_definition_uls").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFCodecUL.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFCodecUL[]
	public AvformatLibrary ff_mxf_data_definition_uls(Pointer<MXFCodecUL > ff_mxf_data_definition_uls) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_data_definition_uls").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFCodecUL.class)).set(ff_mxf_data_definition_uls);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFCodecUL[]
	public final Pointer<MXFCodecUL > ff_mxf_data_definition_uls_$eq(Pointer<MXFCodecUL > ff_mxf_data_definition_uls) {
		ff_mxf_data_definition_uls(ff_mxf_data_definition_uls);
		return ff_mxf_data_definition_uls;
	}
	/// C type : extern const MXFCodecUL[]
	public Pointer<MXFCodecUL > ff_mxf_codec_uls() {
		try {
			return (Pointer<MXFCodecUL >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_codec_uls").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFCodecUL.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFCodecUL[]
	public AvformatLibrary ff_mxf_codec_uls(Pointer<MXFCodecUL > ff_mxf_codec_uls) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_codec_uls").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFCodecUL.class)).set(ff_mxf_codec_uls);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFCodecUL[]
	public final Pointer<MXFCodecUL > ff_mxf_codec_uls_$eq(Pointer<MXFCodecUL > ff_mxf_codec_uls) {
		ff_mxf_codec_uls(ff_mxf_codec_uls);
		return ff_mxf_codec_uls;
	}
	/// C type : extern const MXFPixelLayout[]
	public Pointer<MXFPixelLayout > ff_mxf_pixel_layouts() {
		try {
			return (Pointer<MXFPixelLayout >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_pixel_layouts").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFPixelLayout.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFPixelLayout[]
	public AvformatLibrary ff_mxf_pixel_layouts(Pointer<MXFPixelLayout > ff_mxf_pixel_layouts) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mxf_pixel_layouts").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.MXFPixelLayout.class)).set(ff_mxf_pixel_layouts);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const MXFPixelLayout[]
	public final Pointer<MXFPixelLayout > ff_mxf_pixel_layouts_$eq(Pointer<MXFPixelLayout > ff_mxf_pixel_layouts) {
		ff_mxf_pixel_layouts(ff_mxf_pixel_layouts);
		return ff_mxf_pixel_layouts;
	}
	/// C type : extern const AVMetadataConv[]
	public Pointer<AVMetadataConv > ff_avi_metadata_conv() {
		try {
			return (Pointer<AVMetadataConv >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_avi_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public AvformatLibrary ff_avi_metadata_conv(Pointer<AVMetadataConv > ff_avi_metadata_conv) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_avi_metadata_conv").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVMetadataConv.class)).set(ff_avi_metadata_conv);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVMetadataConv[]
	public final Pointer<AVMetadataConv > ff_avi_metadata_conv_$eq(Pointer<AVMetadataConv > ff_avi_metadata_conv) {
		ff_avi_metadata_conv(ff_avi_metadata_conv);
		return ff_avi_metadata_conv;
	}
	/**
	 * A list of AVI info tags.<br>
	 * C type : extern const char[][5]
	 */
	@Array({5}) 
	public Pointer<Byte > ff_avi_tags() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_avi_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : static const uint8_t[4 * 3]
	@Array({4 * 3}) 
	public Pointer<Byte > ff_qt_default_palette_4() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qt_default_palette_4").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : static const uint8_t[16 * 3]
	@Array({16 * 3}) 
	public Pointer<Byte > ff_qt_default_palette_16() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qt_default_palette_16").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : static const uint8_t[256 * 3]
	@Array({256 * 3}) 
	public Pointer<Byte > ff_qt_default_palette_256() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qt_default_palette_256").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : AVRational
	public AVRational time_base() {
		try {
			return (AVRational)BridJ.getNativeLibrary("avformat").getSymbolPointer("time_base").as(com.nativelibs4java.ffmpeg.avutil.AVRational.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int sample_rate() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("sample_rate").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary sample_rate(int sample_rate) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("sample_rate").as(int.class).set(sample_rate);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int sample_rate_$eq(int sample_rate) {
		sample_rate(sample_rate);
		return sample_rate;
	}
	public int channels() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("channels").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary channels(int channels) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("channels").as(int.class).set(channels);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int channels_$eq(int channels) {
		channels(channels);
		return channels;
	}
	public int width() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("width").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary width(int width) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("width").as(int.class).set(width);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int width_$eq(int width) {
		width(width);
		return width;
	}
	public int height() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("height").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public AvformatLibrary height(int height) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("height").as(int.class).set(height);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int height_$eq(int height) {
		height(height);
		return height;
	}
	/// < Used to select DV channel.
	public int channel() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("channel").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// < Used to select DV channel.
	public AvformatLibrary channel(int channel) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("channel").as(int.class).set(channel);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public final int channel_$eq(int channel) {
		channel(channel);
		return channel;
	}
	/**
	 * < TV standard, NTSC, PAL, SECAM<br>
	 * C type : const char*
	 */
	public Pointer<Byte > standard() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("avformat").getSymbolPointer("standard").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * < TV standard, NTSC, PAL, SECAM<br>
	 * C type : const char*
	 */
	public AvformatLibrary standard(Pointer<Byte > standard) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("standard").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, java.lang.Byte.class)).set(standard);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : const char*
	public final Pointer<Byte > standard_$eq(Pointer<Byte > standard) {
		standard(standard);
		return standard;
	}
	/// < Force raw MPEG-2 transport stream output, if possible.
	@Bits(1) 
	public int mpeg2ts_raw() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("mpeg2ts_raw").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// < Force raw MPEG-2 transport stream output, if possible.
	@Bits(1) 
	public AvformatLibrary mpeg2ts_raw(int mpeg2ts_raw) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("mpeg2ts_raw").as(int.class).set(mpeg2ts_raw);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@Bits(1) 
	public final int mpeg2ts_raw_$eq(int mpeg2ts_raw) {
		mpeg2ts_raw(mpeg2ts_raw);
		return mpeg2ts_raw;
	}
	/**
	 * < Compute exact PCR for each transport<br>
	 * stream packet (only meaningful if<br>
	 * mpeg2ts_raw is TRUE).
	 */
	@Bits(1) 
	public int mpeg2ts_compute_pcr() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("mpeg2ts_compute_pcr").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * < Compute exact PCR for each transport<br>
	 * stream packet (only meaningful if<br>
	 * mpeg2ts_raw is TRUE).
	 */
	@Bits(1) 
	public AvformatLibrary mpeg2ts_compute_pcr(int mpeg2ts_compute_pcr) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("mpeg2ts_compute_pcr").as(int.class).set(mpeg2ts_compute_pcr);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@Bits(1) 
	public final int mpeg2ts_compute_pcr_$eq(int mpeg2ts_compute_pcr) {
		mpeg2ts_compute_pcr(mpeg2ts_compute_pcr);
		return mpeg2ts_compute_pcr;
	}
	/**
	 * < Do not begin to play the stream<br>
	 * immediately (RTSP only).
	 */
	@Bits(1) 
	public int initial_pause() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("initial_pause").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * < Do not begin to play the stream<br>
	 * immediately (RTSP only).
	 */
	@Bits(1) 
	public AvformatLibrary initial_pause(int initial_pause) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("initial_pause").as(int.class).set(initial_pause);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@Bits(1) 
	public final int initial_pause_$eq(int initial_pause) {
		initial_pause(initial_pause);
		return initial_pause;
	}
	@Bits(1) 
	public int prealloced_context() {
		try {
			return (int)BridJ.getNativeLibrary("avformat").getSymbolPointer("prealloced_context").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@Bits(1) 
	public AvformatLibrary prealloced_context(int prealloced_context) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("prealloced_context").as(int.class).set(prealloced_context);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	@Bits(1) 
	public final int prealloced_context_$eq(int prealloced_context) {
		prealloced_context(prealloced_context);
		return prealloced_context;
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_amr_nb_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_amr_nb_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_amr_wb_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_amr_wb_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_h263_1998_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_h263_1998_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_h263_2000_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_h263_2000_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_h264_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_h264_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_mp4a_latm_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mp4a_latm_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_mp4v_es_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mp4v_es_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_mpeg4_generic_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mpeg4_generic_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_ms_rtp_asf_pfa_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_ms_rtp_asf_pfa_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_ms_rtp_asf_pfv_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_ms_rtp_asf_pfv_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_qcelp_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qcelp_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_qdm2_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qdm2_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_qt_rtp_aud_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qt_rtp_aud_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_qt_rtp_vid_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_qt_rtp_vid_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_quicktime_rtp_aud_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_quicktime_rtp_aud_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_quicktime_rtp_vid_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_quicktime_rtp_vid_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_svq3_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_svq3_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_theora_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_theora_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_vorbis_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_vorbis_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern RTPDynamicProtocolHandler
	public RTPDynamicProtocolHandler_s ff_vp8_dynamic_handler() {
		try {
			return (RTPDynamicProtocolHandler_s)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_vp8_dynamic_handler").as(com.nativelibs4java.ffmpeg.avformat.RTPDynamicProtocolHandler_s.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * The ffmpeg codecs we support, and the IDs they have in the file<br>
	 * C type : extern const AVCodecTag[]
	 */
	public Pointer<AVCodecTag > ff_codec_rso_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_rso_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * The ffmpeg codecs we support, and the IDs they have in the file<br>
	 * C type : extern const AVCodecTag[]
	 */
	public AvformatLibrary ff_codec_rso_tags(Pointer<AVCodecTag > ff_codec_rso_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_rso_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_codec_rso_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_codec_rso_tags_$eq(Pointer<AVCodecTag > ff_codec_rso_tags) {
		ff_codec_rso_tags(ff_codec_rso_tags);
		return ff_codec_rso_tags;
	}
	/**
	 * isom.c<br>
	 * C type : extern const AVCodecTag[]
	 */
	public Pointer<AVCodecTag > ff_mp4_obj_type() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mp4_obj_type").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * isom.c<br>
	 * C type : extern const AVCodecTag[]
	 */
	public AvformatLibrary ff_mp4_obj_type(Pointer<AVCodecTag > ff_mp4_obj_type) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_mp4_obj_type").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_mp4_obj_type);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_mp4_obj_type_$eq(Pointer<AVCodecTag > ff_mp4_obj_type) {
		ff_mp4_obj_type(ff_mp4_obj_type);
		return ff_mp4_obj_type;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > codec_movvideo_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("codec_movvideo_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary codec_movvideo_tags(Pointer<AVCodecTag > codec_movvideo_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("codec_movvideo_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(codec_movvideo_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > codec_movvideo_tags_$eq(Pointer<AVCodecTag > codec_movvideo_tags) {
		codec_movvideo_tags(codec_movvideo_tags);
		return codec_movvideo_tags;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > codec_movaudio_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("codec_movaudio_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary codec_movaudio_tags(Pointer<AVCodecTag > codec_movaudio_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("codec_movaudio_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(codec_movaudio_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > codec_movaudio_tags_$eq(Pointer<AVCodecTag > codec_movaudio_tags) {
		codec_movaudio_tags(codec_movaudio_tags);
		return codec_movaudio_tags;
	}
	/// C type : extern const AVCodecTag[]
	public Pointer<AVCodecTag > ff_codec_movsubtitle_tags() {
		try {
			return (Pointer<AVCodecTag >)BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_movsubtitle_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public AvformatLibrary ff_codec_movsubtitle_tags(Pointer<AVCodecTag > ff_codec_movsubtitle_tags) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("ff_codec_movsubtitle_tags").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AVCodecTag.class)).set(ff_codec_movsubtitle_tags);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern const AVCodecTag[]
	public final Pointer<AVCodecTag > ff_codec_movsubtitle_tags_$eq(Pointer<AVCodecTag > ff_codec_movsubtitle_tags) {
		ff_codec_movsubtitle_tags(ff_codec_movsubtitle_tags);
		return ff_codec_movsubtitle_tags;
	}
	/// C type : extern URLProtocol*
	public Pointer<URLProtocol > first_protocol() {
		try {
			return (Pointer<URLProtocol >)BridJ.getNativeLibrary("avformat").getSymbolPointer("first_protocol").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.URLProtocol.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern URLProtocol*
	public AvformatLibrary first_protocol(Pointer<URLProtocol > first_protocol) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("first_protocol").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.URLProtocol.class)).set(first_protocol);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern URLProtocol*
	public final Pointer<URLProtocol > first_protocol_$eq(Pointer<URLProtocol > first_protocol) {
		first_protocol(first_protocol);
		return first_protocol;
	}
	/// C type : extern URLInterruptCB*
	public Pointer<Pointer<AvformatLibrary.URLInterruptCB > > url_interrupt_cb() {
		try {
			return (Pointer<Pointer<AvformatLibrary.URLInterruptCB > >)BridJ.getNativeLibrary("avformat").getSymbolPointer("url_interrupt_cb").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.URLInterruptCB.class))).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern URLInterruptCB*
	public AvformatLibrary url_interrupt_cb(Pointer<Pointer<AvformatLibrary.URLInterruptCB > > url_interrupt_cb) {
		try {
			{
				BridJ.getNativeLibrary("avformat").getSymbolPointer("url_interrupt_cb").as(org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, org.bridj.util.DefaultParameterizedType.paramType(org.bridj.Pointer.class, com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.URLInterruptCB.class))).set(url_interrupt_cb);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern URLInterruptCB*
	public final Pointer<Pointer<AvformatLibrary.URLInterruptCB > > url_interrupt_cb_$eq(Pointer<Pointer<AvformatLibrary.URLInterruptCB > > url_interrupt_cb) {
		url_interrupt_cb(url_interrupt_cb);
		return url_interrupt_cb;
	}
	/// Undefined type
	public static interface RDTDemuxContext {
		
	};
	/// Undefined type
	public static interface tm {
		
	};
	/// Undefined type
	public static interface DVMuxContext {
		
	};
	/// Undefined type
	public static interface AVTreeNode {
		
	};
	/// Undefined type
	public static interface DVDemuxContext {
		
	};
	/// Undefined type
	public static interface TimeFilter {
		
	};
	/// Undefined type
	public static interface checksum {
		
	};
	/// Undefined type
	public static interface AVPacketList {
		
	};
	/// Undefined type
	public static interface PayloadContext {
		
	};
	/// Undefined type
	public static interface AVFormatParameters {
		
	};
	/// Undefined type
	public static interface in_addr {
		
	};
	/// Undefined type
	public static interface sockaddr_storage {
		
	};
	/// Undefined type
	public static interface AVStream {
		
	};
	/// Undefined type
	public static interface AVFormatContext {
		
	};
	/// Undefined type
	public static interface RMStream {
		
	};
	/// Undefined type
	public static interface MpegTSContext {
		
	};
	/// Undefined type
	public static interface AVInputFormat {
		
	};
}
