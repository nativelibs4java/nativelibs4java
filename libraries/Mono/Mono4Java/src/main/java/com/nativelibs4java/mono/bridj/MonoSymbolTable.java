package com.nativelibs4java.mono.bridj;
import com.nativelibs4java.mono.bridj.MonoLibrary.MonoDebugDataTable;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : /Library/Frameworks/Mono.framework/Headers/mono-2.0/mono/metadata/mono-debug.h:51</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("mono") 
public class MonoSymbolTable extends StructObject {
	public MonoSymbolTable() {
		super();
	}
	public MonoSymbolTable(Pointer pointer) {
		super(pointer);
	}
	@Field(0) 
	public long magic() {
		return this.io.getLongField(this, 0);
	}
	@Field(0) 
	public MonoSymbolTable magic(long magic) {
		this.io.setLongField(this, 0, magic);
		return this;
	}
	@Field(1) 
	public int version() {
		return this.io.getIntField(this, 1);
	}
	@Field(1) 
	public MonoSymbolTable version(int version) {
		this.io.setIntField(this, 1, version);
		return this;
	}
	@Field(2) 
	public int total_size() {
		return this.io.getIntField(this, 2);
	}
	@Field(2) 
	public MonoSymbolTable total_size(int total_size) {
		this.io.setIntField(this, 2, total_size);
		return this;
	}
	/**
	 * Corlib and metadata info.<br>
	 * C type : MonoDebugHandle*
	 */
	@Field(3) 
	public Pointer<MonoDebugHandle > corlib() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * Corlib and metadata info.<br>
	 * C type : MonoDebugHandle*
	 */
	@Field(3) 
	public MonoSymbolTable corlib(Pointer<MonoDebugHandle > corlib) {
		this.io.setPointerField(this, 3, corlib);
		return this;
	}
	/// C type : MonoDebugDataTable*
	@Field(4) 
	public Pointer<MonoDebugDataTable > global_data_table() {
		return this.io.getPointerField(this, 4);
	}
	/// C type : MonoDebugDataTable*
	@Field(4) 
	public MonoSymbolTable global_data_table(Pointer<MonoDebugDataTable > global_data_table) {
		this.io.setPointerField(this, 4, global_data_table);
		return this;
	}
	/// C type : MonoDebugList*
	@Field(5) 
	public Pointer<MonoDebugList > data_tables() {
		return this.io.getPointerField(this, 5);
	}
	/// C type : MonoDebugList*
	@Field(5) 
	public MonoSymbolTable data_tables(Pointer<MonoDebugList > data_tables) {
		this.io.setPointerField(this, 5, data_tables);
		return this;
	}
	/**
	 * The symbol files.<br>
	 * C type : MonoDebugList*
	 */
	@Field(6) 
	public Pointer<MonoDebugList > symbol_files() {
		return this.io.getPointerField(this, 6);
	}
	/**
	 * The symbol files.<br>
	 * C type : MonoDebugList*
	 */
	@Field(6) 
	public MonoSymbolTable symbol_files(Pointer<MonoDebugList > symbol_files) {
		this.io.setPointerField(this, 6, symbol_files);
		return this;
	}
}
